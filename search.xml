<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>中文webfont实际落地应用</title>
    <url>/2020/04/15/webfont%E5%AE%9E%E9%99%85%E8%90%BD%E5%9C%B0%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>WebFont 已经是2010年的技术了，但是中文网络环境一直没有大范围的使用，这跟中文字体有很大的关系。如果我们现在想在项目中实际使用，有些什么需要注意的地方？</p>
<h2 id="WebFont的优势"><a href="#WebFont的优势" class="headerlink" title="WebFont的优势"></a>WebFont的优势</h2><p>首先讨论下为什么会用到WebFont。当页面上视觉元素需要用到非系统自带的字体时，设计师通常会把文字做到图上，前端直接把图糊到页面上展示。这样做有什么问题呢？</p>
<p>把文字做在图里的缺点：</p>
<ol>
<li><p>图片体积比较大，加载资源耗时比较高</p>
</li>
<li><p>维护麻烦，当有一个图片上的文案需要修改时，需要视觉做图—&gt;数据中心修改资源或前端修改代码</p>
</li>
</ol>
<p>WebFont的技术帮助我们解决了这些问题，还有以下优点：</p>
<ol>
<li><p>可以被选择、复制</p>
</li>
<li><p>可以被搜索引擎搜索，有利SEO</p>
</li>
<li><p>可以在页面上用文字方式搜索内容（CTRL + F）</p>
</li>
<li><p>维护、修改文字方便</p>
</li>
<li><p>相比图片较节省流量（！！只限部分字体）</p>
</li>
<li><p>在支援各种屏幕大小时，适应度高（改变字号、换行排版等）</p>
</li>
<li><p>有助于无障碍浏览，能被朗读网站内容</p>
</li>
</ol>
<h2 id="中文WebFont为什么没用起来？"><a href="#中文WebFont为什么没用起来？" class="headerlink" title="中文WebFont为什么没用起来？"></a>中文WebFont为什么没用起来？</h2><p>看看上面两个感叹号的点，为什么只限部分字体？</p>
<h3 id="中文字体文件体积太大了"><a href="#中文字体文件体积太大了" class="headerlink" title="中文字体文件体积太大了"></a>中文字体文件体积太大了</h3><p>我们看很多外国的网站，都使用了WebFont的技术，这是因为英文字体，基本上只有26个字母，加上0~9 10个数字，一些标点符号，所以他们的字体文件体积相当小。</p>
<p>而中文呢？总共有两万多字，还没算上简繁体的字体不同，通常中文字体大概有3000个左右的字符，体积比英文大很多</p>
<h3 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><p>在IE还流行的世代，不同版本的IE和套IE壳的浏览器，对webfont支持不同的格式，要全面支持还要多准备几份字体文件</p>
<p>不过到了今天大部分桌面浏览器用的是webkit内核，移动端浏览器也都支持ttf字体文件，这个问题基本上不存在了</p>
<h3 id="渲染效果"><a href="#渲染效果" class="headerlink" title="渲染效果"></a>渲染效果</h3><p>在Windows Xp流行的世代，Xp系统对字体渲染的效果相当差，效果跟用图片制作的效果差别很大。</p>
<p>不过现在这个也基本是过去式了</p>
<p>总结下来现在主要需要解决的问题就是怎么去减少字体文件的加载时间</p>
<h2 id="那我们该怎么用？"><a href="#那我们该怎么用？" class="headerlink" title="那我们该怎么用？"></a>那我们该怎么用？</h2><ol>
<li><p>全局预载字体文件，例如把字体文件放在app里，开放api给webview调用，webview直接指定使用这个字体就可以了，就像使用系统字体一样。但根据在cf上搜索的结果是……并没有这样的好事，而且我们想使用的字体，不一定就刚好放在我们运行的app里</p>
</li>
<li><p>重新生成字体文件，只抽取我们需要的字符，缩小字体文件的大小。这样可牺牲一点加载时间，换取在任何支持WebFont的webview里使用，也可以灵活决定使用的字体。但是使用这个字体的文字字符需要预先知道，也限定在这个范围内，不能随意更新（更新需要重新生成字体文件）</p>
</li>
</ol>
<p>综上，其实我们能选的方案也只有一个2，但如果只用在标题和一些数字（倒计时、价格之类）上的话，也可以满足要求</p>
<h2 id="那怎么压缩字体？"><a href="#那怎么压缩字体？" class="headerlink" title="那怎么压缩字体？"></a>那怎么压缩字体？</h2><p>这个嘛，就有挺多工具了，像</p>
<p><a href="http://font-spider.org/" target="_blank" rel="noopener">字蛛</a></p>
<p><a href="http://ecomfe.github.io/fontmin/tw" target="_blank" rel="noopener">fontmin</a></p>
<p>都支持命令行调用，方便嵌入工作流</p>
<h2 id="压缩后的字体有多大？"><a href="#压缩后的字体有多大？" class="headerlink" title="压缩后的字体有多大？"></a>压缩后的字体有多大？</h2><p>以下用fontmin进行测试</p>
<p>测试文字： 为你推荐 热卖大牌 618好礼 猜你喜欢 全品齐聚 欢乐今宵 特色会场 显示秒杀 1234567890</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>字体名称</th>
<th>原大小</th>
<th>压缩后大小</th>
</tr>
</thead>
<tbody>
<tr>
<td>令东齐伋复刻体</td>
<td>41.5MB</td>
<td>62.8KB</td>
</tr>
<tr>
<td>优设标题黑</td>
<td>1.4MB</td>
<td>6.9KB</td>
</tr>
<tr>
<td>问题书房</td>
<td>2.9MB</td>
<td>12.9KB</td>
</tr>
</tbody>
</table>
</div>
<p>只要一个icon图片的体积，就可以把这么多的楼层标题都套上漂漂亮亮的字体了，是不是想立刻拥有呢</p>
<!-- ## 字体文件存储在哪？

字体文件直接放oss，默认给的地址`stroage.jd.com`拿去写在CSS里会提示跨域，禁止访问。把域名改成`storage.360buyimg.com`就没问题了   --by Azu

同样传ppms也行，不过要自己申请上传权限 -->
<h2 id="还有一些渲染问题"><a href="#还有一些渲染问题" class="headerlink" title="还有一些渲染问题"></a>还有一些渲染问题</h2><p>打开一个使用了WebFont技术的页面，看一下它的网络请求瀑布图，可以发现字体文件是在很靠后的顺序开始加载的，那在字体文件加载好之前，页面是怎么呈现呢？</p>
<p>网上找到部分浏览器的字体文件加载和渲染机制：</p>
<ul>
<li><p>IE：<br>它会直接使用备用字体渲染，最后等webfont字体加载完毕后重新渲染。</p>
</li>
<li><p>Safari：<br>它会一直等待webfont字体加载完毕，并且期间不会渲染字体。</p>
</li>
<li><p>Chrome / Firefox：<br>它们会等待webfont字体加载，如果在3秒之内没有加载完毕，则使用备用字体渲染。最后webfont加载完毕，使用并重新渲染。</p>
</li>
</ul>
<p>无论哪种情况，都会有很大可能先出现一种展示方式，然后切换到另一种展示方式的突然变化，这个变化根据原字体和目标字体表现不同，甚至还可能带来重新换行、容器大小变化的问题，这是一个很不好的用户体验，甚至带来展示bug；</p>
<p>如果能在字体文件加载好前，只展示loading画面或骨架屏，不展示使用这个字体相关的元素；在加载好之后再展示，是比较好的解决方案。</p>
<p>目前直接在css中用@font-face定义的字体文件，是否下载好是不能用js的方式探测的。但我们还有一个工具<a href="https://github.com/typekit/webfontloader" target="_blank" rel="noopener">webfontloader</a>，可以使用js来接管加载字体文件的这个工作。</p>
<p>它可以定义每个加载字体文件的超时时间，再使用独立每个字体文件的「加载中」「已加载」「加载失败」「不支持」钩子，去完全把控整个字体加载的过程。让我们去实行各种预加载懒加载方案</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>font</tag>
      </tags>
  </entry>
  <entry>
    <title>优化流式MP4视频</title>
    <url>/2020/03/30/%E4%BC%98%E5%8C%96%E6%B5%81%E5%BC%8FMP4%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<p>原文链接: <a href="https://rigor.com/blog/optimizing-mp4-video-for-fast-streaming" target="_blank" rel="noopener">https://rigor.com/blog/optimizing-mp4-video-for-fast-streaming</a></p>
<p>随着Flash的逐渐息微，和移动设备的爆炸式增长，越来越多的内容通过HTML5视频分发。你可以通过<a href="https://rigor.com/blog/optimizing-animated-gifs-with-html5-video" target="_blank" rel="noopener">把GIF动图替换成HTML5视频来提升你网站的访问速度</a>。在此之上，视频文件本身也有很多能优化的地方来提高表现。</p>
<p>一个最重要的点是，视频文件必须为H5线上流式传输作优化。缺少这些优化，会在用户尝试播放视频时，有几百毫秒的延迟，还会浪费数兆的流量。在这篇文章中会介绍怎样去做优化。</p>
<h2 id="MP4流是怎么工作的"><a href="#MP4流是怎么工作的" class="headerlink" title="MP4流是怎么工作的"></a>MP4流是怎么工作的</h2><p>在<a href="https://rigor.com/blog/2015/12/optimizing-animated-gifs-with-html5-video" target="_blank" rel="noopener">上一篇文章</a>的讨论中，HTML5视频是一个不需要第三方插件（如Flash）的跨平台看视频的方式。在2016年，<a href="https://en.wikipedia.org/wiki/MPEG-4_Part_14" target="_blank" rel="noopener">使用H264编码的MP4文件</a>（下面简称MP4视频）成为所有线上HTML5视频的标准格式。所以当我们讨论优化HTML5视频的时候，我们实际上是讨论如何更快的播放MP4视频。我们需要了解MP4视频的结构，和流式传输是怎样工作的。</p>
<p>构成MP4文件的文件块，称为<code>原子块</code>。有些原子块存储字幕、章节，当然还有些存储视频、音频数据。其中有一个特别的原子块，存储<code>元数据</code>，包括文件中哪些原子块是视频、音频数据，视频文件的长宽、帧率，称为<code>moov</code>原子块。可以想象成moov原子块是整个文件的目录。</p>
<p>当你播放一个视频的时候，程序扫描整个MP4文件，找到moov原子块，然后用这个目录找到视频和音频开始的文件块，然后开始播放。不幸的是，moov原子块可以存放在文件中的任何一个地方，所以程序不知道moov原子块什么时候才会出现。当整个文件存储下来的时候，搜索moov原子块的工作能很顺利的进行。但有些情况是你并没有存储整个文件，例如流式HTML5视频。这是流式HTML5的一个重要优点，你可以在没有下载完整个文件的时候开始播放。</p>
<p>在播放流式视频的时候，浏览器请求视频文件，开始按顺序接收文件，并搜索moov文件块。如果moov文件块并不是在文件开始的部分，浏览器要么下载整个文件搜索moov文件块；要么把文件分拆成多个小文件，尝试找到moov文件块。</p>
<p>上述的两种方法都浪费了很多的时间和流量。不幸的是，在找到moov文件块之前，是平时不能播放的。在下面的截图中，可以看到浏览器在尝试流式播放一个未经优化的HTML5视频。</p>
<p><img src="https://img12.360buyimg.com/imagetools/jfs/t1/108902/5/10771/28425/5e81bd63Eef511a23/1124327743c781e3.png" alt="https://img12.360buyimg.com/imagetools/jfs/t1/108902/5/10771/28425/5e81bd63Eef511a23/1124327743c781e3.png"></p>
<p>可以看到在视频可以播放前，浏览器做了3个请求。</p>
<p>第一个请求，通过返回码<code>206 Partial Content</code>，和查看请求头知道，浏览器使用<a href="https://en.wikipedia.org/wiki/Byte_serving" target="_blank" rel="noopener">HTTP range request</a>下载视频文件的前552KB。但是moov文件块并不在这部分中，所以视频还不能开始播放。</p>
<p>第二个请求，浏览器使用了另一个<code>HTTP range request</code>请求下载了视频文件的最后21KB。这部分包含了moov原子块，告诉了浏览器视频音频数据开始的地方。</p>
<p>最后，浏览器做了第三个请求，下载视频音频数据，并可以开始播放。整个流程浪费了半兆的流量和造成了210毫秒的延迟。只是因为浏览器找不到moov原子块。</p>
<p>更糟的情况是，服务器可能不支持<code>HTTP range request</code>，浏览器不能跳过去寻找moov文件块，只能下载整个文件。这是另一个原因驱使服务器<a href="https://zoompf.com/blog/2010/03/performance-tip-for-http-downloads" target="_blank" rel="noopener">优化去支持部分文件下载（partial download）</a></p>
<p>HTML5使用的理想的视频文件是，moov文件块在文件最开始的地方。这样浏览器可以避免下载整个文件或者发起额外的请求去寻找moov文件块。一个优化过的视频文件下载过程的截图如下：</p>
<p><img src="https://img10.360buyimg.com/imagetools/jfs/t1/105128/19/16965/11571/5e81c1cdE17d11753/8c0ec3e8dc01a8c0.png" alt="https://img10.360buyimg.com/imagetools/jfs/t1/105128/19/16965/11571/5e81c1cdE17d11753/8c0ec3e8dc01a8c0.png"></p>
<p>这个文件的moov文件块在文件最初始的地方，视频可以非常快地加载和播放，带来更好的用户体验</p>
<h2 id="怎样为流式视频作优化？"><a href="#怎样为流式视频作优化？" class="headerlink" title="怎样为流式视频作优化？"></a>怎样为流式视频作优化？</h2><p>如上所述，我们优化用作流式传输的视频文件的方向是，把视频文件的原子块重新组织，把moov文件块放在最前的地方。那我们该怎么做？大部分视频编码软件有一个<code>为web作优化（optimize for web）</code>或<code>为流式传输作优化（optimize for streaming）</code>的选项，为我们做这个工作。在输出视频的时候，必须在输出选项中确认是优化过的。例如，在下面的截图中，<a href="https://handbrake.fr/" target="_blank" rel="noopener">开源视频编码软件Handbrake</a>有一个<code>Web Optimized</code>的选项，可以使输出文件的moov原子块在文件的开始位置。</p>
<p><img src="https://img12.360buyimg.com/imagetools/jfs/t1/109096/23/10753/48416/5e81c3ecE01563d87/b07afb992de1e529.png" alt="https://img12.360buyimg.com/imagetools/jfs/t1/109096/23/10753/48416/5e81c3ecE01563d87/b07afb992de1e529.png"></p>
<p>这是从源视频输出优化MP4文件的一个可行的方案，但如果你已经有一个MP4文件呢？</p>
<p>你也可以重新组织现有的文件去为流式传输做优化。例如，<a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">开源命令行视频编码器FFMpeg</a>可以重新组织MP4文件的结构，把moov文件块移到文件头部。不像重新编码视频文件那样花时间和占用CPU，重组文件是一个比较简单的操作，并且不会改变视频的品质。下面是一个使用ffmpeg优化名为<code>input.mp4</code>的视频文件的例子。输出的文件命名为<code>output.mp4</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -movflags faststart -acodec copy -vcodec copy output.mp4</span><br></pre></td></tr></table></figure>
<p><code>-movflags faststart</code>参数是告诉ffmpeg去重新排序MP4视频文件原子块，把moov原子块移到最前面。并规定ffmpeg复制视频和音频数据，不作重新编码，所以不会有质量改变。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不管是把GIF动画转成MP4，还是有很多的现有MP4文件。当优化它们的结构后，可以更加快速地加载和播放它们。重新编排原子块的顺序，把moov原子块移到最前面后，浏览器就可以避免做额外的<code>HTTP range request</code>请求去寻找moov原子块。这可以使浏览器立即开始流式播放视频。你可以在输出视频的时候对流式传输作优化。也可以对现有的视频文件使用例如ffmpeg的工具做整理，而不影响视频文件的质量。</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>translate</tag>
      </tags>
  </entry>
  <entry>
    <title>金币飞入效果</title>
    <url>/2019/11/27/%E9%87%91%E5%B8%81%E9%A3%9E%E5%85%A5%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<p>先看一下效果是怎样的:</p>
<p><img src="https://img10.360buyimg.com/imagetools/jfs/t1/70114/8/16197/1029481/5dde4245E42155d9f/e3bbd07edbeedc3e.gif" alt="https://img10.360buyimg.com/imagetools/jfs/t1/70114/8/16197/1029481/5dde4245E42155d9f/e3bbd07edbeedc3e.gif"></p>
<p>简单说就是固定两个点，元素从其中一个出发，到另一个点结束，中间的轨迹为随机曲线（包括直线）</p>
<a id="more"></a>
<p>从这个条件立刻想到的是二次函数的图像，经过x轴上的两个点，把两个固定的点当作是<code>x</code>轴与函数图像的交点，再随机取开口的大小($y=ax^2+bx+c$中a的取值)，就可以定义出这条随机曲线</p>
<p>这样实现分以下步骤来处理</p>
<ol>
<li>先定义开始点和结束点</li>
<li>定义一个新座标系，以开始点为原点(0, 0)，结束点为x轴上的点(d, 0)d为两点的距离</li>
<li>求出从新座标系变换到原座标系的变换矩阵</li>
<li>定义曲线的方程</li>
<li>使用曲线方程求出某个时间点的元素位置，并用变换矩阵映射回原有座标系，得到原有座标系中元素的位置</li>
</ol>
<p><strong>以下定义开始点为<code>p1</code>, 结束点为<code>p2</code></strong></p>
<h2 id="新座标系映射到原座标系的矩阵"><a href="#新座标系映射到原座标系的矩阵" class="headerlink" title="新座标系映射到原座标系的矩阵"></a>新座标系映射到原座标系的矩阵</h2><p>先设变换矩阵为$\begin{bmatrix}A &amp; B &amp; C\\D &amp; E &amp; F\\G &amp; H &amp; I\end{bmatrix}$</p>
<p>通过</p>
<script type="math/tex; mode=display">\begin{bmatrix}A & B & C\\\\D & E & F\\\\G & H & I\end{bmatrix}\begin{bmatrix}0\\\\0\\\\1\end{bmatrix} = \begin{bmatrix}p1.x\\\\p1.y\\\\1\end{bmatrix}</script><p>和</p>
<script type="math/tex; mode=display">\begin{bmatrix}A & B & C\\\\D & E & F\\\\G & H & I\end{bmatrix}\begin{bmatrix}d\\\\0\\\\1\end{bmatrix} = \begin{bmatrix}p2.x\\\\p2.y\\\\1\end{bmatrix}</script><p>可以得出:</p>
<script type="math/tex; mode=display">C = p1.x</script><script type="math/tex; mode=display">F = p1.y</script><script type="math/tex; mode=display">G = 0</script><script type="math/tex; mode=display">I = 1</script><script type="math/tex; mode=display">A = \frac{p2.x - p1.x}{d}</script><script type="math/tex; mode=display">D = \frac{p2.y - p1.y}{d}</script><p>剩下的$B$、$E$和$H$怎么算出来呢？</p>
<p>通过变换矩阵中<a href="https://zh.wikipedia.org/wiki/%E5%8F%98%E6%8D%A2%E7%9F%A9%E9%98%B5#%E5%85%B6%E5%AE%83%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%98%E6%8D%A2" target="_blank" rel="noopener">各个位置数值在对向量影响</a>可以看出，因为两个座标系只通过了平移和旋转的处理，所以$B = -D$，$E = A$，$H = 0$</p>
<p>得出转换矩阵为:</p>
<script type="math/tex; mode=display">\begin{bmatrix}\frac{p2.x - p1.x}{d} & \frac{p1.y - p2.y}{d} & p1.x\\\\\frac{p2.y - p1.y}{d} & \frac{p2.x - p1.x}{d} & p1.y\\\\0 & 0 & 1\end{bmatrix}</script><h2 id="定义曲线的方程"><a href="#定义曲线的方程" class="headerlink" title="定义曲线的方程"></a>定义曲线的方程</h2><p>前面我们先预设了这个方程为二次函数，所以设函数为：</p>
<script type="math/tex; mode=display">y = ax^2 + bx + c</script><p>且新座标系中的$(0, 0)$和$(d, 0)$两点</p>
<p>可以求出:</p>
<script type="math/tex; mode=display">b = -a * d</script><script type="math/tex; mode=display">c = 0</script><p>整理为以下函数:</p>
<script type="math/tex; mode=display">y = ax^2 - adx</script><h2 id="求出某个时间点的元素位置"><a href="#求出某个时间点的元素位置" class="headerlink" title="求出某个时间点的元素位置"></a>求出某个时间点的元素位置</h2><p>设从开始出发经过的时间为<code>t</code>秒，<strong>这里可不是把<code>t</code>放入上面的方程中!</strong></p>
<p>上面方程中<code>x</code>是什么意思？是在两点的连线中，元素与开始点的距离，所以在已知经过时间的情况下，我们还需要知道元素沿两点连线方向移动的速度，这个速度可以作为一个参数传入，这里先定元素沿两点连线方向匀速移动，速度是<code>v</code>每秒，所以得出$x = vt$，并在<code>x &gt; d</code>的时候停止运动</p>
<p>前面我们说过函数图像的开口大小由<code>a</code>来决定，这里我们用<code>Math.random() - 0.5</code>取一个值（因为曲线可在上下两个象限，所以可取正负值）</p>
<p>代入曲线函数可求出<code>y</code>的值，再把$(x, y)$的座标通过变换矩阵映射回原座标系得到应该在屏幕上显示的座标</p>
<h2 id="一些优化"><a href="#一些优化" class="headerlink" title="一些优化"></a>一些优化</h2><p>在使用上面的方法制作的效果中，发现在距离比较短的两点效果还好，距离比较大的两点，元素相对两点连线的偏移量相当大，效果很奇怪，结合当<code>a</code>的取值越小、函数图像的开口越大，曲线越平缓、最大偏移量也较小，所以考虑在对<code>a</code>取值时，使用<code>(Math.random() - 0.5) / d</code>的方法，使在距离较大的两点，也能使元素较聚拢在两点连线上</p>
<p>在这次的效果中，元素表现为金币，不会自己作不规则的动作，所以使用二次函数的抛物线图像可以满足需求，但如果表现为鱼之类的动物时，可加上一些来回的动作丰富运动的曲线，例如在二次函数的基础上乘以一个三角函数<code>sin</code>，可作出较为丰富的运动轨迹（不过加在金币上会很魔性，大家可以试试）</p>
<h3 id="如果想要速度渐变呢？"><a href="#如果想要速度渐变呢？" class="headerlink" title="如果想要速度渐变呢？"></a>如果想要速度渐变呢？</h3><p>如果期望元素飞行的速度从慢到快，那需要改写一下求给定时间点元素位置的方法</p>
<p>例如我希望沿连线方向速度遵循$v = at$匀加速运动，给定最后进入的速度为$V_{max}$</p>
<p>把到达终点时的情况代入上面的速度公式，得到$V_{max} = aT$</p>
<p>根据匀速运动路程公式$s = \frac{at^2}{2}$，也把到达终点的情况代入，得到$d = \frac{aT^2}{2}$</p>
<p>上面的$T$是从起点运动到终点经过的时间</p>
<p>可以计算出$a = \frac{V^2_{max}}{2d}$</p>
<p>代回进匀速运动路程公式可得$x = \frac{V^2_{max}}{4d}t^2$</p>
<p>然后继续原来的计算就可以了</p>
<h3 id="如果上面的速度渐变的运动，固定的是整个运动过程的时间呢？"><a href="#如果上面的速度渐变的运动，固定的是整个运动过程的时间呢？" class="headerlink" title="如果上面的速度渐变的运动，固定的是整个运动过程的时间呢？"></a>如果上面的速度渐变的运动，固定的是整个运动过程的时间呢？</h3><p>因为上面的方法固定的是最后的进入速度，所以在距离较远的时候，运动所需的时间会较多，速度提升的幅度也较少；在一般需求中，过渡动画的展示时间应该是固定的，对应到这个效果，就是元素从起点到终点运动的时间固定</p>
<p>这个时候就可以直接使用匀速运动路程公式，代入终点的情况，得到$d = \frac{aT^2}{2}$，可计算得:</p>
<script type="math/tex; mode=display">a = \frac{2d}{T^2}</script><p>然后代回路程公式就ok了</p>
<script type="math/tex; mode=display">x = \frac{d}{T^2}t^2</script><h3 id="如果不是匀加速运动…"><a href="#如果不是匀加速运动…" class="headerlink" title="如果不是匀加速运动…"></a>如果不是匀加速运动…</h3><p>如果像ease-in之类，$v = f(t)$</p>
<p>当然也可以求出来，像上面两个方法，需要用到的一个是速度对应时间<code>t</code>的函数，这个已经给定，另一个就是走过的路程对应<code>t</code>的函数，根据高中数学知识，使用积分可以列出:</p>
<script type="math/tex; mode=display">s = \int_0^Tf(t)dt</script><p>至于具体的函数怎么算积分，可参考下面这本书:</p>
<p><img src="https://img14.360buyimg.com/n1/jfs/t1/74892/22/1282/345338/5cf89187E2adf2d72/83f4650700a302b8.jpg" alt="https://img14.360buyimg.com/n1/jfs/t1/74892/22/1282/345338/5cf89187E2adf2d72/83f4650700a302b8.jpg"></p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>连连看开发</title>
    <url>/2019/11/21/%E8%BF%9E%E8%BF%9E%E7%9C%8B%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>因为不可描述的原因，过了没两天，又要开发另一个小游戏喇～（我好兴奋呀.jpg）</p>
<p>消消乐开发完没两天，渲染就用同一套，也是用Vue了</p>
<h2 id="同样先理一下游戏的逻辑"><a href="#同样先理一下游戏的逻辑" class="headerlink" title="同样先理一下游戏的逻辑"></a>同样先理一下游戏的逻辑</h2><ol>
<li>选取两个相同类型的块</li>
<li>两个块之间沿行、列连线，线只能经过空白的格子，且最多只能转向两次</li>
<li>如果存在这样的连线，则两个块消除成空白的格子；若不存在则不作改变</li>
</ol>
<p>描述的有点绕，但玩过的应该都知道是什么一种机制，其中比较困难的一点应该是怎么找出两块的连线</p>
<p>但在这之前，还是有一步: <code>0. 生成一张能全部消除的图</code></p>
<a id="more"></a>
<h2 id="游戏逻辑实现"><a href="#游戏逻辑实现" class="headerlink" title="游戏逻辑实现"></a>游戏逻辑实现</h2><p>因为这次的游戏机制没有重新排序、插入新数据的动作，所以图的存储方式没有什么特殊要求，就也沿用消消乐的存储方式了</p>
<h3 id="0-生成一张能全部消除的图"><a href="#0-生成一张能全部消除的图" class="headerlink" title="0. 生成一张能全部消除的图"></a>0. 生成一张能全部消除的图</h3><p>根据玩法，图里必须先预留一些空白格子，才能让游戏进行下去，这次给的地图构造是这样的:</p>
<p><img src="https://img13.360buyimg.com/imagetools/jfs/t1/62865/39/15954/8653/5dd65007E895af7ab/14153b56d8c8999f.png" alt="https://img13.360buyimg.com/imagetools/jfs/t1/62865/39/15954/8653/5dd65007E895af7ab/14153b56d8c8999f.png"></p>
<p>其中白色的位置是预留空白格子</p>
<p>那其他格子该怎么填充呢？像消消乐那样无脑随机类型塞是不行的，要是最后剩了一个没得配对，就玩不下去了；所以塞的时候必须成对的塞</p>
<p>那就先定每个类型的格子数量都是偶数的，然后每塞一个就减1，直到都用完</p>
<p>先定义一个数组存每一个类型格子的数量，每个类型就平均分了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> typeInfo = <span class="built_in">Array</span>(<span class="keyword">this</span>.typeCount).fill(<span class="keyword">this</span>.partColCount * <span class="number">2</span> * <span class="keyword">this</span>.rowCount / <span class="keyword">this</span>.typeCount)</span><br></pre></td></tr></table></figure>
<p>然后每次塞的时候，就从里面找还没用完的格子来用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getAvailableType = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> availableTypeInfo = []</span><br><span class="line">  typeInfo.forEach(<span class="function">(<span class="params">count, type</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(count &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      availableTypeInfo.push(type)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> tryType = availableTypeInfo[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * availableTypeInfo.length)]</span><br><span class="line">  typeInfo[tryType]--</span><br><span class="line">  <span class="keyword">return</span> tryType + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里<code>return tryType + 1</code>是因为类型标识<code>type</code>里<code>0</code>的定义是空白格子，有效的格子类型从<code>1</code>开始</p>
<p>然后遍历整个图，在每个位置上调用上面的方法塞格子</p>
<h3 id="1-两个格子的连线"><a href="#1-两个格子的连线" class="headerlink" title="1. 两个格子的连线"></a>1. 两个格子的连线</h3><p>按游戏的规则，连线最多只能转向两次，那我们就可以穷举一下，不转、转1次、转2次的连线来看这两个格子能不能连起来</p>
<h4 id="不转向"><a href="#不转向" class="headerlink" title="不转向"></a>不转向</h4><p>不转向的连线就是一根直线，限制了这两个格子必须在同一列或同一行</p>
<p>也就是说如果已经知道两个格子不在同一行也不在同一列，那就可以跳到下一个方法了</p>
<p>我们可以先找这两个格子之间的每一个格子，然后看这些格子是不是都是<code>type === 0</code>的来判断能不能连线</p>
<p>因为后面两种方法都有这样找两个格子中间每一个格子的操作，这里就先引入一个方法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">lineTo(src, target)&#123;</span><br><span class="line">  <span class="keyword">if</span>(src.rowIndex === target.rowIndex || src.colIndex === target.colIndex)&#123;</span><br><span class="line">    <span class="keyword">let</span> notZeroCount = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> lineCellList = []</span><br><span class="line">    <span class="keyword">const</span> current = &#123;</span><br><span class="line">      rowIndex: src.rowIndex,</span><br><span class="line">      colIndex: src.colIndex</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> step = &#123;</span><br><span class="line">      row: normalize(target.rowIndex - src.rowIndex),</span><br><span class="line">      col: normalize(target.colIndex - src.colIndex)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!(current.rowIndex === target.rowIndex &amp;&amp; current.colIndex === target.colIndex))&#123;</span><br><span class="line">      lineCellList.push(&#123;</span><br><span class="line">        ...this.map[current.colIndex][current.rowIndex],</span><br><span class="line">        rowIndex: current.rowIndex,</span><br><span class="line">        colIndex: current.colIndex,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.map[current.colIndex][current.rowIndex].type !== <span class="number">0</span>)&#123;</span><br><span class="line">        notZeroCount++</span><br><span class="line">      &#125;</span><br><span class="line">      current.rowIndex += step.row</span><br><span class="line">      current.colIndex += step.col</span><br><span class="line">    &#125;</span><br><span class="line">    lineCellList.push(&#123;</span><br><span class="line">      ...this.map[target.colIndex][target.rowIndex],</span><br><span class="line">      rowIndex: target.rowIndex,</span><br><span class="line">      colIndex: target.colIndex,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.map[target.colIndex][target.rowIndex].type !== <span class="number">0</span>)&#123;</span><br><span class="line">      notZeroCount++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      notZeroCount,</span><br><span class="line">      lineCellList</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法其实也包括了开始、结束的两个格子的，同时也统计了这些格子中不是空白格子的数量</p>
<p>那如果调用上面的方法，得到的非空白格数量<code>notZeroCount</code>为2时（有且仅有两端的格子不是空白格），这两个格子就可以连线</p>
<h4 id="转一次"><a href="#转一次" class="headerlink" title="转一次"></a>转一次</h4><p>转一次的连线最多只有两种可能，且两个格子必须不同行且不同列：</p>
<p><img src="https://img13.360buyimg.com/imagetools/jfs/t1/86207/17/2795/16692/5dd657fbE0d4492eb/427ac3e70d45784e.png" alt="https://img13.360buyimg.com/imagetools/jfs/t1/86207/17/2795/16692/5dd657fbE0d4492eb/427ac3e70d45784e.png"></p>
<p>其中黄色格子是选定的两个格子，我们找到转向的位置（灰色格子）就可以用上面的<code>lineTo</code>方法找到连线的两个线段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1转</span></span><br><span class="line"><span class="keyword">if</span>(t1.rowIndex !== t2.rowIndex &amp;&amp; t1.colIndex !== t2.colIndex)&#123;</span><br><span class="line">  <span class="keyword">const</span> c1 = &#123;</span><br><span class="line">    rowIndex: t1.rowIndex,</span><br><span class="line">    colIndex: t2.colIndex</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> line1_1 = <span class="keyword">this</span>.lineTo(t1, c1)</span><br><span class="line">  <span class="keyword">const</span> line1_2 = <span class="keyword">this</span>.lineTo(c1, t2)</span><br><span class="line">  <span class="keyword">if</span>(line1_1.notZeroCount === <span class="number">1</span> &amp;&amp; line1_2.notZeroCount === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> [line1_1.lineCellList, line1_2.lineCellList]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> c2 = &#123;</span><br><span class="line">    rowIndex: t2.rowIndex,</span><br><span class="line">    colIndex: t1.colIndex</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> line2_1 = <span class="keyword">this</span>.lineTo(t1, c2)</span><br><span class="line">  <span class="keyword">const</span> line2_2 = <span class="keyword">this</span>.lineTo(c2, t2)</span><br><span class="line">  <span class="keyword">if</span>(line2_1.notZeroCount === <span class="number">1</span> &amp;&amp; line2_2.notZeroCount === <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> [line2_1.lineCellList, line2_2.lineCellList]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中每个线段中不是空白格的数量<code>notZeroCount</code>为<code>1</code>时（只有开始、结束的格子）就可以判断为可以连线</p>
<h4 id="转两次"><a href="#转两次" class="headerlink" title="转两次"></a>转两次</h4><p>这种情况就比较复杂了，先画一下都有怎样的可能</p>
<p><img src="https://img13.360buyimg.com/imagetools/jfs/t1/64254/40/16068/16725/5dd65c22E831565d1/276896502b2abb4f.png" alt="https://img13.360buyimg.com/imagetools/jfs/t1/64254/40/16068/16725/5dd65c22E831565d1/276896502b2abb4f.png"></p>
<p>唔……这一坨都是什么东西，先分个类拆开来看看</p>
<p><img src="https://img13.360buyimg.com/imagetools/jfs/t1/54177/4/16387/14957/5dd65ce5E11070f30/c922a018c22c691c.png" alt="https://img13.360buyimg.com/imagetools/jfs/t1/54177/4/16387/14957/5dd65ce5E11070f30/c922a018c22c691c.png"></p>
<p><img src="https://img13.360buyimg.com/imagetools/jfs/t1/71284/27/15844/15557/5dd65ce5E781cdf91/c530d237655d9770.png" alt="https://img13.360buyimg.com/imagetools/jfs/t1/71284/27/15844/15557/5dd65ce5E781cdf91/c530d237655d9770.png"></p>
<p>对，为什么要这样分类呢？这两种类型里的连线都有什么特点？</p>
<p>同一个类型的连线，都是由三条线段组成的，而中间的这条线段，连接了两个目标块所在的行（或列）</p>
<p>而这一条线段（以下称为<code>bridge</code>）可以出现在任何列（行），只要<code>bridge</code>的两端与目标块的连线上都是空白格，就可以判断成这个连线可以让这两个目标块相连了</p>
<p>那我们的突破口就是找到这条<code>bridge</code>，用两个块的行（列）座标，在图上的每一列（行）遍历，如果找到一条<code>bridge</code>上都是空白格，那再检查<code>bridge</code>的两端到目标块的连线上如果也都是空白格，那我们就找到这条连线了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2转</span></span><br><span class="line"><span class="keyword">if</span>(t1.rowIndex !== t2.rowIndex)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> colIndex = <span class="number">0</span>; colIndex &lt; <span class="keyword">this</span>.partColCount * <span class="number">2</span> + <span class="number">1</span>; colIndex++)&#123;</span><br><span class="line">    <span class="keyword">const</span> bridge = <span class="keyword">this</span>.lineTo(&#123;</span><br><span class="line">      rowIndex: t1.rowIndex,</span><br><span class="line">      colIndex</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      rowIndex: t2.rowIndex,</span><br><span class="line">      colIndex</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(bridge.notZeroCount === <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> line1 = <span class="keyword">this</span>.lineTo(t1, &#123;</span><br><span class="line">        rowIndex: t1.rowIndex,</span><br><span class="line">        colIndex</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> line2 = <span class="keyword">this</span>.lineTo(&#123;</span><br><span class="line">        rowIndex: t2.rowIndex,</span><br><span class="line">        colIndex</span><br><span class="line">      &#125;, t2)</span><br><span class="line">      <span class="keyword">if</span>(line1.notZeroCount === <span class="number">1</span> &amp;&amp; line2.notZeroCount === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> [line1.lineCellList, bridge.lineCellList, line2.lineCellList]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t1.colIndex !== t2.colIndex)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> rowIndex = <span class="number">0</span>; rowIndex &lt; <span class="keyword">this</span>.rowCount; rowIndex++)&#123;</span><br><span class="line">    <span class="keyword">const</span> bridge = <span class="keyword">this</span>.lineTo(&#123;</span><br><span class="line">      rowIndex,</span><br><span class="line">      colIndex: t1.colIndex</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      rowIndex,</span><br><span class="line">      colIndex: t2.colIndex</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(bridge.notZeroCount === <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">const</span> line1 = <span class="keyword">this</span>.lineTo(t1, &#123;</span><br><span class="line">        rowIndex,</span><br><span class="line">        colIndex: t1.colIndex</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> line2 = <span class="keyword">this</span>.lineTo(&#123;</span><br><span class="line">        rowIndex,</span><br><span class="line">        colIndex: t2.colIndex</span><br><span class="line">      &#125;, t2)</span><br><span class="line">      <span class="keyword">if</span>(line1.notZeroCount === <span class="number">1</span> &amp;&amp; line2.notZeroCount === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> [line1.lineCellList, bridge.lineCellList, line2.lineCellList]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="游戏渲染"><a href="#游戏渲染" class="headerlink" title="游戏渲染"></a>游戏渲染</h2><p>同样沿用消消乐的渲染方法，因为不涉及到格子移动，只需要做被消掉的格子消失的动画，只需要在被消失的格子上加一个<code>lastType</code>的属性，标识它消失之前是什么类型的格子就好了</p>
<p>连线需要画出来，表示两个格子是怎么连起来的，因为通过上面的<code>lineTo</code>方法，可以得到每条线段的起点、终点，那有这些座标就可以自由发挥了；这里用到的方法是每个线段插入一个宽度（高度）为2的元素，播完动画移除</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>消消乐开发</title>
    <url>/2019/11/20/%E6%B6%88%E6%B6%88%E4%B9%90%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>项目要求要做一个消消乐（三消、3-match game）的开发，找遍国内外的demo，总有些功能缺失，迫不得已自己来搞一个</p>
<p>先说在前面，用Vue做是为了团队里好复用，其他情况用Vue来做游戏就是折磨，能换其他渲染器来做的话抽取里面的核心逻辑就好了</p>
<h2 id="先理一下游戏的逻辑"><a href="#先理一下游戏的逻辑" class="headerlink" title="先理一下游戏的逻辑"></a>先理一下游戏的逻辑</h2><ol>
<li>选取两个相邻的块调换位置，生成新的图</li>
<li>新的图上如果行、列上有三个或以上的相同类型块，则消除掉；如果没有，则复原为原来的图</li>
<li>消除掉的块由上方的块填补，位置调整之后再随机插入新的块补充空缺的位置</li>
<li>新的图继续检查是否有能消除的，有的话继续执行第3步，直到没有能消除的块</li>
<li>检查图上是否有能动一下就能消除的块，没有的话游戏结束，或者整图全部更新</li>
</ol>
<p>当然，在上面几步之前，还有一个<code>0. 生成一张没有能消除的图</code></p>
<p>网上找的好几个demo，都是没有上面的第5步，就是检查图上是否有能动一下就能消除的块，下面要做的重点就在这部分了</p>
<a id="more"></a>
<p>流程图如下:</p>
<div id="flowchart-0" class="flow-chart"></div>

<h2 id="游戏逻辑实现"><a href="#游戏逻辑实现" class="headerlink" title="游戏逻辑实现"></a>游戏逻辑实现</h2><h3 id="1-先定图的存储形式"><a href="#1-先定图的存储形式" class="headerlink" title="1. 先定图的存储形式"></a>1. 先定图的存储形式</h3><p>按逻辑来说图的存储当然就是一个矩阵了，在javascript里是用数组套数组的形式来实现矩阵，那先是行还是列呢？</p>
<p>考虑到从列的方向需要做重新排序和新数据填充，把每一列当成一个数组来看待是比较好处理的方法</p>
<p>然后考虑新数据插入的方向是上方，把图的上方作为数组的尾部比较符合通常对数组的操作习惯</p>
<p><strong>最后定义的图存储方式为：外层为每一列组成的从左到右的数组，内层为块从下到上的数组</strong></p>
<p>每一块有一个<code>type</code>属性标志他的类型，数据类型为<code>Number</code></p>
<h3 id="2-调换块的位置"><a href="#2-调换块的位置" class="headerlink" title="2. 调换块的位置"></a>2. 调换块的位置</h3><p>这一步很简单，就交换图中两个座标的块的数据就好了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">swap(target, source)&#123;</span><br><span class="line">  <span class="keyword">const</span> cell = <span class="keyword">this</span>.map[target.colIndex][target.rowIndex]</span><br><span class="line">  <span class="keyword">this</span>.map[target.colIndex][target.rowIndex] = &#123;</span><br><span class="line">    ...this.map[source.colIndex][source.rowIndex],</span><br><span class="line">    lastPos: &#123;</span><br><span class="line">      row: source.rowIndex - target.rowIndex,</span><br><span class="line">      col: source.colIndex - target.colIndex</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.map[source.colIndex][source.rowIndex] = &#123;</span><br><span class="line">    ...cell,</span><br><span class="line">    lastPos: &#123;</span><br><span class="line">      row: target.rowIndex - source.rowIndex,</span><br><span class="line">      col: target.colIndex - source.colIndex</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-检查是否有能消除的块"><a href="#3-检查是否有能消除的块" class="headerlink" title="3. 检查是否有能消除的块"></a>3. 检查是否有能消除的块</h3><p>这一步的思路是从行、列两个方向扫描连续的同类型块</p>
<p>当然说是这么说，怎么能使遍历的次数尽量少，尽量不要扫描重复的块，实现起来就五花八门</p>
<p>首先先引入一个方法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">scanCol(target, combo = <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> targetCell = <span class="keyword">this</span>.map[target.colIndex][target.rowIndex]</span><br><span class="line">  <span class="keyword">if</span>(target.rowIndex &gt;= <span class="keyword">this</span>.size.rowCount - <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 到达边缘</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      combo,</span><br><span class="line">      type: targetCell.type,</span><br><span class="line">      endTarget: target</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> nextCell = <span class="keyword">this</span>.map[target.colIndex][target.rowIndex + <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span>(nextCell.type === targetCell.type)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.scanCol(&#123;</span><br><span class="line">      rowIndex: target.rowIndex + <span class="number">1</span>,</span><br><span class="line">      colIndex: target.colIndex</span><br><span class="line">    &#125;, combo + <span class="number">1</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      combo,</span><br><span class="line">      type: targetCell.type,</span><br><span class="line">      endTarget: target</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个递归的方法，从传入的块开始，从列的方向（行的方向是另一个方法，跟这个基本一样）开始扫描，寻找同类型的块，最后返回:</p>
<p><code>combo</code>连续的块的数量（注意单独一个是<code>0</code>，连续两个是<code>1</code>，连续三个是<code>2</code>，以此类推）</p>
<p><code>type</code>连续的块的类型</p>
<p><code>endTarget</code>结束连续的最后一个块的座标，如果是单独一个的，返回的就是传入的座标</p>
<p>用这个方法，每一列只要从第一个开始调用，之后每次从返回的<code>endTarget</code>的下一个再调用，直到数组尾部，就能得到整一行的连续块的分布</p>
<p>如此每一列的块只需要取一次值，就能扫描完成，效率算是很高了（虽然在行的方向还需要再扫描一次…）</p>
<p>如此在行和列方向各扫描一次，就能得到整张图的连续类型块分布<code>comboMap</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">checkCrush()&#123;</span><br><span class="line">  <span class="keyword">let</span> pointToGet = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> comboMap = <span class="built_in">Array</span>(<span class="keyword">this</span>.size.colCount).fill(<span class="built_in">Array</span>(<span class="keyword">this</span>.size.rowCount).fill(<span class="number">0</span>))</span><br><span class="line">  <span class="keyword">let</span> hasCrush = <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 列扫描</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> colIndex = <span class="number">0</span>; colIndex &lt; <span class="keyword">this</span>.size.colCount; colIndex++)&#123;</span><br><span class="line">    <span class="keyword">let</span> currentRowIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> comboCol = <span class="built_in">Array</span>(<span class="keyword">this</span>.size.rowCount).fill(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span>(currentRowIndex &lt; <span class="keyword">this</span>.size.rowCount)&#123;</span><br><span class="line">      <span class="keyword">const</span> comboInfo = <span class="keyword">this</span>.scanCol(&#123;</span><br><span class="line">        rowIndex: currentRowIndex,</span><br><span class="line">        colIndex</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span>(comboInfo.combo &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> row = comboInfo.endTarget.rowIndex; row &gt;= comboInfo.endTarget.rowIndex - comboInfo.combo; row--)&#123;</span><br><span class="line">          comboCol[row] = comboInfo.type</span><br><span class="line">        &#125;</span><br><span class="line">        pointToGet += GOT_POINT[comboInfo.combo]</span><br><span class="line">        hasCrush = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      currentRowIndex = comboInfo.endTarget.rowIndex + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    comboMap[colIndex] = comboCol</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 行扫描</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> rowIndex = <span class="number">0</span>; rowIndex &lt; <span class="keyword">this</span>.size.rowCount; rowIndex++)&#123;</span><br><span class="line">    <span class="keyword">let</span> currentColIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> comboRow = <span class="built_in">Array</span>(<span class="keyword">this</span>.size.colCount).fill(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">while</span>(currentColIndex &lt; <span class="keyword">this</span>.size.colCount)&#123;</span><br><span class="line">      <span class="keyword">const</span> comboInfo = <span class="keyword">this</span>.scanRow(&#123;</span><br><span class="line">        rowIndex,</span><br><span class="line">        colIndex: currentColIndex</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">if</span>(comboInfo.combo &gt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> col = comboInfo.endTarget.colIndex; col &gt;= comboInfo.endTarget.colIndex - comboInfo.combo; col--)&#123;</span><br><span class="line">          comboRow[col] = comboInfo.type</span><br><span class="line">        &#125;</span><br><span class="line">        pointToGet += GOT_POINT[comboInfo.combo]</span><br><span class="line">        hasCrush = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      currentColIndex = comboInfo.endTarget.colIndex + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    comboRow.forEach(<span class="function">(<span class="params">cell, colIndex</span>) =&gt;</span> &#123;</span><br><span class="line">      comboMap[colIndex][rowIndex] = cell || comboMap[colIndex][rowIndex]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(comboMap)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    hasCrush,</span><br><span class="line">    comboMap,</span><br><span class="line">    pointToGet</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-消除"><a href="#4-消除" class="headerlink" title="4. 消除"></a>4. 消除</h3><p>当有了上一步得到的<code>comboMap</code>，就可以遍历一遍，把原来图上相应的位置清除了，这里清除的方式是把<code>type</code>置<code>0</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">crush()&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    hasCrush,</span><br><span class="line">    comboMap,</span><br><span class="line">    pointToGet</span><br><span class="line">  &#125; = <span class="keyword">this</span>.checkCrush()</span><br><span class="line">  <span class="keyword">if</span>(hasCrush)&#123;</span><br><span class="line">    comboMap.forEach(<span class="function">(<span class="params">col, colIndex</span>) =&gt;</span> &#123;</span><br><span class="line">      col.forEach(<span class="function">(<span class="params">crushCell, rowIndex</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(crushCell &gt; <span class="number">0</span>)&#123;</span><br><span class="line">          <span class="keyword">this</span>.map[colIndex][rowIndex] = &#123;</span><br><span class="line">            type: <span class="number">0</span>,</span><br><span class="line">            lastPos: &#123;</span><br><span class="line">              row: <span class="number">0</span>,</span><br><span class="line">              col: <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            lastType: crushCell</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.point += pointToGet</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-调整位置"><a href="#5-调整位置" class="headerlink" title="5. 调整位置"></a>5. 调整位置</h3><p>消除块后的空位，需要被上方的块移过来填充，把空位挤到数组尾部去:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">sort()&#123;</span><br><span class="line">  <span class="keyword">this</span>.map.forEach(<span class="function">(<span class="params">col, colIndex</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sortedCol = []</span><br><span class="line">    col.forEach(<span class="function">(<span class="params">cell, rowIndex</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(cell.type &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        sortedCol.push(&#123;</span><br><span class="line">          ...cell,</span><br><span class="line">          lastPos: &#123;</span><br><span class="line">            row: rowIndex - sortedCol.length,</span><br><span class="line">            col: <span class="number">0</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">while</span>(sortedCol.length &lt; col.length)&#123;</span><br><span class="line">      sortedCol.push(&#123;</span><br><span class="line">        type: <span class="number">0</span>,</span><br><span class="line">        lastPos: &#123;</span><br><span class="line">          row: col.length - sortedCol.length,</span><br><span class="line">          col: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.map[colIndex] = sortedCol</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-填充新数据"><a href="#6-填充新数据" class="headerlink" title="6. 填充新数据"></a>6. 填充新数据</h3><p>遍历图上，把<code>type</code>为<code>0</code>的块随机取一个类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fillMap()&#123;</span><br><span class="line">  <span class="keyword">this</span>.map.forEach(<span class="function">(<span class="params">col, colIndex</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cuCol = col.slice(<span class="number">0</span>)</span><br><span class="line">    col.forEach(<span class="function">(<span class="params">cell, rowIndex</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(!cell || cell.type === <span class="number">0</span>)&#123;</span><br><span class="line">        cuCol[rowIndex] = &#123;</span><br><span class="line">          ...cuCol[rowIndex],</span><br><span class="line">          type: <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * <span class="keyword">this</span>.typeCount),</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cuCol[rowIndex] &amp;&amp; cuCol[rowIndex].enterPos)&#123;</span><br><span class="line">          cuCol[rowIndex].lastPos = cuCol[rowIndex].enterPos</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.map[colIndex] = cuCol</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="0-生成一个没有能消除的图"><a href="#0-生成一个没有能消除的图" class="headerlink" title="0. 生成一个没有能消除的图"></a>0. 生成一个没有能消除的图</h3><p>这个为什么要放到最后？因为都要用到上面的步骤啊</p>
<p>整个生成的方法是：</p>
<ol>
<li>先把图上的全部块的<code>type</code>置<code>0</code></li>
<li>填充空位(6)</li>
<li>检查有没有能消除的(3)</li>
<li>消除(4)</li>
<li>调整位置(5)</li>
<li>填充空位(6)</li>
<li>如果还有能消的重复(3~6)</li>
<li>完成</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">init()&#123;</span><br><span class="line">  <span class="keyword">this</span>.fillMap()</span><br><span class="line">  <span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.crush()</span><br><span class="line">    <span class="keyword">this</span>.sort()</span><br><span class="line">    <span class="keyword">this</span>.fillMap()</span><br><span class="line">  &#125; <span class="keyword">while</span> (<span class="keyword">this</span>.checkCrush().hasCrush)</span><br><span class="line">  <span class="keyword">this</span>.resetPos()</span><br><span class="line">  <span class="keyword">this</span>.isInit = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>|</p>
<p>|</p>
<p>|</p>
<p>|</p>
<h3 id="是不是还缺了点东西？"><a href="#是不是还缺了点东西？" class="headerlink" title="是不是还缺了点东西？"></a>是不是还缺了点东西？</h3><p>对啊，造完轮子之后发现开始说的重点还没做！</p>
<p>那怎么检查还有没有能动一下就能消的块？</p>
<p>分解一下这个问题，拆成如下两步:</p>
<ol>
<li>有没有一个块，它的类型换一下就能消除？</li>
<li>这个块有变成这个类型的可能吗？</li>
</ol>
<h4 id="有没有一个块，它的类型换一下就能消除？"><a href="#有没有一个块，它的类型换一下就能消除？" class="headerlink" title="有没有一个块，它的类型换一下就能消除？"></a>有没有一个块，它的类型换一下就能消除？</h4><h5 id="怎样的块在变换类型后能消除？"><a href="#怎样的块在变换类型后能消除？" class="headerlink" title="怎样的块在变换类型后能消除？"></a>怎样的块在变换类型后能消除？</h5><p>因为三个块连成一列/行后能形成消除，那这个块一定是在这三个的其中之一；因为两端的两个位置地位上是一样的，所以只有这两种情况:</p>
<p>类型A:</p>
<p><img src="https://img14.360buyimg.com/imagetools/jfs/t1/96403/32/2696/7209/5dd51695Ed76afbbe/c766dd275baf3e96.png" alt="https://img14.360buyimg.com/imagetools/jfs/t1/96403/32/2696/7209/5dd51695Ed76afbbe/c766dd275baf3e96.png"></p>
<p>类型B:</p>
<p><img src="https://img10.360buyimg.com/imagetools/jfs/t1/79159/22/15772/6640/5dd51695E61703e18/d8cfb0a5c5951594.png" alt="https://img10.360buyimg.com/imagetools/jfs/t1/79159/22/15772/6640/5dd51695E61703e18/d8cfb0a5c5951594.png"></p>
<p>以上两图中黄色的块是已知的类型，当红色位置块的类型也变成相同的类型，就能达成消除条件</p>
<h5 id="怎么找到这些位置呢？"><a href="#怎么找到这些位置呢？" class="headerlink" title="怎么找到这些位置呢？"></a>怎么找到这些位置呢？</h5><p>还记得上面的<code>scanCol</code>方法吗？它能找到给定的位置，从一个方向找到连续相同类型的块</p>
<p>那我们找到一个连续块数量是2的位置，它的前后各一个位置就是上面类型A的位置</p>
<p>那类型B呢？找这种空一格的位置有点麻烦，不过，再结合下面的条件，我们能找到取巧的方法</p>
<h4 id="这个块有变成这个类型的可能吗？"><a href="#这个块有变成这个类型的可能吗？" class="headerlink" title="这个块有变成这个类型的可能吗？"></a>这个块有变成这个类型的可能吗？</h4><p>块变换成另一个类型的方法就是跟旁边的块调换位置，也就是，上、下、左、右相邻的位置有没有这种类型的块</p>
<p>类型A的情况，块的一个相邻类型已经固定了，现在要考虑的就是剩下的三个位置还有没有这个类型的块</p>
<p>抛除原来已知的块，<strong>这个位置旁边的4个位置，这种类型的块的数量大于等于2</strong>，这样的位置有能造成消除的可能</p>
<p>用这种思路回头再看类型B，是不是这个位置旁边的4个位置，这种类型的块数量有没有大于等于3就可以了？</p>
<p>甚至可以不固定类型，<strong>在一个位置，旁边的4个位置上，同样类型的块数量大于等于3</strong>，这样的位置也有可能造成消除</p>
<p>这样我们找到了两种类型的定义</p>
<p>类型A位置的搜索:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 类型A扫描</span></span><br><span class="line"><span class="keyword">const</span> chanceMap = []</span><br><span class="line"><span class="comment">// 列扫描</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> colIndex = <span class="number">0</span>; colIndex &lt; <span class="keyword">this</span>.size.colCount; colIndex++)&#123;</span><br><span class="line">  <span class="keyword">let</span> currentRowIndex = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> chanceCol = <span class="built_in">Array</span>(<span class="keyword">this</span>.size.rowCount).fill(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">while</span>(currentRowIndex &lt; <span class="keyword">this</span>.size.rowCount)&#123;</span><br><span class="line">    <span class="keyword">const</span> comboInfo = <span class="keyword">this</span>.scanCol(&#123;</span><br><span class="line">      rowIndex: currentRowIndex,</span><br><span class="line">      colIndex</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(comboInfo.combo === <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="comment">// 后一个</span></span><br><span class="line">      <span class="keyword">if</span>(comboInfo.endTarget.rowIndex + <span class="number">1</span> &lt; <span class="keyword">this</span>.size.rowCount)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!chanceCol[comboInfo.endTarget.rowIndex + <span class="number">1</span>])&#123;</span><br><span class="line">          chanceCol[comboInfo.endTarget.rowIndex + <span class="number">1</span>] = []</span><br><span class="line">        &#125;</span><br><span class="line">        chanceCol[comboInfo.endTarget.rowIndex + <span class="number">1</span>].push(&#123;</span><br><span class="line">          needCount: <span class="number">2</span>,</span><br><span class="line">          type: comboInfo.type</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 前一个</span></span><br><span class="line">      <span class="keyword">if</span>(currentRowIndex - <span class="number">1</span> &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!chanceCol[currentRowIndex - <span class="number">1</span>])&#123;</span><br><span class="line">          chanceCol[currentRowIndex - <span class="number">1</span>] = []</span><br><span class="line">        &#125;</span><br><span class="line">        chanceCol[currentRowIndex - <span class="number">1</span>].push(&#123;</span><br><span class="line">          needCount: <span class="number">2</span>,</span><br><span class="line">          type: comboInfo.type</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    currentRowIndex = comboInfo.endTarget.rowIndex + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  chanceMap[colIndex] = chanceCol</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 行扫描</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> rowIndex = <span class="number">0</span>; rowIndex &lt; <span class="keyword">this</span>.size.rowCount; rowIndex++)&#123;</span><br><span class="line">  <span class="keyword">let</span> currentColIndex = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> chanceRow = <span class="built_in">Array</span>(<span class="keyword">this</span>.size.colCount).fill(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">while</span>(currentColIndex &lt; <span class="keyword">this</span>.size.colCount)&#123;</span><br><span class="line">    <span class="keyword">const</span> comboInfo = <span class="keyword">this</span>.scanRow(&#123;</span><br><span class="line">      rowIndex,</span><br><span class="line">      colIndex: currentColIndex</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(comboInfo.combo === <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="comment">// 后一个</span></span><br><span class="line">      <span class="keyword">if</span>(comboInfo.endTarget.colIndex + <span class="number">1</span> &lt; <span class="keyword">this</span>.size.colCount)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!chanceRow[comboInfo.endTarget.colIndex + <span class="number">1</span>])&#123;</span><br><span class="line">          chanceRow[comboInfo.endTarget.colIndex + <span class="number">1</span>] = []</span><br><span class="line">        &#125;</span><br><span class="line">        chanceRow[comboInfo.endTarget.colIndex + <span class="number">1</span>].push(&#123;</span><br><span class="line">          needCount: <span class="number">2</span>,</span><br><span class="line">          type: comboInfo.type</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 前一个</span></span><br><span class="line">      <span class="keyword">if</span>(currentColIndex - <span class="number">1</span> &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!chanceRow[currentColIndex - <span class="number">1</span>])&#123;</span><br><span class="line">          chanceRow[currentColIndex - <span class="number">1</span>] = []</span><br><span class="line">        &#125;</span><br><span class="line">        chanceRow[currentColIndex - <span class="number">1</span>].push(&#123;</span><br><span class="line">          needCount: <span class="number">2</span>,</span><br><span class="line">          type: comboInfo.type</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    currentColIndex = comboInfo.endTarget.colIndex + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  chanceRow.forEach(<span class="function">(<span class="params">cell, colIndex</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(cell &amp;&amp; chanceMap[colIndex][rowIndex])&#123;</span><br><span class="line">      chanceMap[colIndex][rowIndex] = chanceMap[colIndex][rowIndex].concat(cell)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      chanceMap[colIndex][rowIndex] = chanceMap[colIndex][rowIndex] || cell || <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>搜索到的可能是类型A的位置都存在<code>chanceMap</code>中，里面存放了需要的块类型<code>type</code>和至少的数量<code>needCount</code></p>
<p>然后再在这些每一个位置看符不符合给定的条件就好了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chanceMap.forEach(<span class="function">(<span class="params">col, colIndex</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(!toMoveMap[colIndex])&#123;</span><br><span class="line">    toMoveMap[colIndex] = <span class="built_in">Array</span>(<span class="keyword">this</span>.size.rowCount).fill(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  col.forEach(<span class="function">(<span class="params">qualiList, rowIndex</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(qualiList)&#123;</span><br><span class="line">      qualiList.forEach(<span class="function"><span class="params">quali</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> siblingsInfo = <span class="keyword">this</span>.siblings(&#123;</span><br><span class="line">          rowIndex,</span><br><span class="line">          colIndex</span><br><span class="line">        &#125;, quali)</span><br><span class="line">        <span class="keyword">if</span>(siblingsInfo.fitQuali)&#123;</span><br><span class="line">          toMoveMap[colIndex][rowIndex] = <span class="string">'A'</span></span><br><span class="line">          hasChance = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>类型B的搜索就是遍历每一个位置，看它旁边的块类型的数量:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 类型B扫描</span></span><br><span class="line"><span class="comment">// 全局扫描</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> colIndex = <span class="number">0</span>; colIndex &lt; <span class="keyword">this</span>.size.colCount; colIndex++)&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> rowIndex = <span class="number">0</span>; rowIndex &lt; <span class="keyword">this</span>.size.rowCount; rowIndex++)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; siblingsInfo &#125; = <span class="keyword">this</span>.siblings(&#123;</span><br><span class="line">      rowIndex,</span><br><span class="line">      colIndex</span><br><span class="line">    &#125;)</span><br><span class="line">    siblingsInfo.forEach(<span class="function"><span class="params">count</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(count &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">        toMoveMap[colIndex][rowIndex] = <span class="string">'B'</span></span><br><span class="line">        hasChance = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实如果只是想找是否还有移动-消除的机会的话，在找到上面位置的其中一个就可以跳出了，也减少遍历的次数；</p>
<p>但说不定，还要做玩家长时间找不到移动的位置，需要做个提示呢？所以，所有符合能移动的位置都存在了<code>toMoveMap</code>中了</p>
<h2 id="游戏界面的渲染"><a href="#游戏界面的渲染" class="headerlink" title="游戏界面的渲染"></a>游戏界面的渲染</h2><p>因为这次界面渲染用的是Vue，上面的核心逻辑还为渲染加了一些冗余数据，但我趴地下想了下，换其他方法来做渲染这些数据好像也是必须的？</p>
<p>有细心看上面代码的可能会留意到，每一个块的数据有一个<code>lastPos</code>的字段，表示这个块在上一次操作（换位、消除、排序、填充）时的位置，不过是相对现在位置的偏移值</p>
<p>例如一个块现在的位置是第3列第4行，它是通过一个消除后排序的操作从第3列第6行掉下来的，它的<code>lastPos</code>值就是<code>{col: 0, row: 2}</code></p>
<p>Vue的每次更新渲染分成3个阶段:</p>
<ol>
<li>所有块在它上一次渲染结束的状态</li>
<li>所有块从它上一次的状态通过动画变换成这一次的状态</li>
<li>所有块在它这一次的状态</li>
</ol>
<p>上面的序号对应Vue组件中<code>boardStatus</code>的值</p>
<p><code>0</code>状态下每个块的位置通过其所在位置加上<code>lastPos</code>偏移值计算得出</p>
<p><code>1</code>状态下块的位置为其所在位置，加上<code>transition</code>加入补间动画，如果块的<code>type</code>为<code>0</code>则再加上一个缩小效果</p>
<p><code>2</code>状态下块为其所在位置，去掉<code>transition</code></p>
<p>每次操作之间，调用<code>next</code>方法去更新渲染:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">next()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.boardStatus = <span class="number">0</span></span><br><span class="line">    Vue.set(<span class="keyword">this</span>, <span class="string">'map'</span>, <span class="keyword">this</span>.game.map)</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.boardStatus = <span class="number">1</span></span><br><span class="line">        <span class="keyword">this</span>.game.resetPos()</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          Vue.set(<span class="keyword">this</span>, <span class="string">'map'</span>, <span class="keyword">this</span>.game.map)</span><br><span class="line">          <span class="keyword">this</span>.boardStatus = <span class="number">2</span></span><br><span class="line">          <span class="keyword">this</span>.isNoMove = !<span class="keyword">this</span>.game.checkChance().hasChance</span><br><span class="line">          <span class="keyword">this</span>.gotPoint = <span class="keyword">this</span>.game.point</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;, <span class="number">300</span>)</span><br><span class="line">      &#125;, <span class="number">10</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为每次操作后，都有检查能否消除然后再消除-排序-填充-检查能否消除的循环操作，本来是想用<code>do...while</code>做的，但是中间插进了动画这个异步操作后，这个循环也只能写成异步了，你看上面的<code>next</code>返回<code>Promise</code>就是为这个准备的，循环也只能写成递归调用了:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> crushUntilEnd()&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.game.checkCrush().hasCrush)&#123;</span><br><span class="line">    <span class="keyword">this</span>.game.crush()</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.next()</span><br><span class="line">    <span class="keyword">this</span>.game.sort()</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.next()</span><br><span class="line">    <span class="keyword">this</span>.game.fillMap()</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">this</span>.next()</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.game.checkCrush().hasCrush)&#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">this</span>.crushUntilEnd()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 生成不能消除的图
e=>end: 游戏结束或重新生成图
opSwitchCell=>operation: 调换相邻的两个块
isCanCrush=>condition: 有能消除的块吗？
isCanCrush2=>condition: 还有能消除的块吗?
opCrush=>operation: 消除块
opSortAndFill=>operation: 重新把块排序和填充新块
isHasChance=>condition: 有能动一下就能消除的块吗？

st->opSwitchCell->isCanCrush
isCanCrush(yes)->opCrush->opSortAndFill->isCanCrush2
isCanCrush(no)->opSwitchCell
isCanCrush2(yes)->opCrush
isCanCrush2(no)->isHasChance
isHasChance(yes)->opSwitchCell
isHasChance(no)->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>大文件上传</title>
    <url>/2019/10/30/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>最近遇到一道题目，是怎样实现一个大文件上传的接口设计，需要考虑的一个功能是断点续传</p>
<p>因为以往没有多少服务器开发的经验，一开始想不明白断点续传的实现原理；看了一下其他人的实现方法，思路是把文件分块上传，上传完再合并的方法</p>
<h2 id="确定方案"><a href="#确定方案" class="headerlink" title="确定方案"></a>确定方案</h2><p>因为文件通过分割、合并、网络传输的处理，最后需要计算md5与原来的文件比对，所以客户端和服务端都需要计算md5</p>
<p>支持断点续传的实现，应该在本地计算md5值后，服务器使用md5值查询上传的状态，是完全重头开始传输文件还是只传缺失的块，或是已全部上传好</p>
<p>服务器保存上传的块需要知道每个块在原文件所在的位置，这需要客户端在上传的同时带上这个参数；每个文件块也应当做客户端——服务端md5校验，避免因为文件块的传输错误导致合并文件后的文件错误</p>
<a id="more"></a>
<div id="flowchart-0" class="flow-chart"></div>

<h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><p>web客户端使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/slice" target="_blank" rel="noopener"><code>Blob.slice</code>API</a>分割文件，使用<code>spark-md5</code>计算md5值</p>
<p>选择文件后，切割文件和计算文件和文件块md5：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,</span><br><span class="line">  file = <span class="keyword">this</span>.selectedFile,</span><br><span class="line">  chunkSize = <span class="number">2097152</span>,<span class="comment">// Read in chunks of 2MB</span></span><br><span class="line">  chunks = <span class="built_in">Math</span>.ceil(file.size / chunkSize),</span><br><span class="line">  spark = <span class="keyword">new</span> SparkMD5.ArrayBuffer(),</span><br><span class="line">  fileReader = <span class="keyword">new</span> FileReader()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> currentChunk = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loadNext = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> start = currentChunk * chunkSize,</span><br><span class="line">    end = (start + chunkSize) &gt; file.size ? file.size : (start + chunkSize)</span><br><span class="line">  fileReader.readAsArrayBuffer(blobSlice.call(file, start, end))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fileReader.onload = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> partSpark = <span class="keyword">new</span> SparkMD5.ArrayBuffer()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'read chunk nr'</span>, currentChunk + <span class="number">1</span>, <span class="string">'of'</span>, chunks)</span><br><span class="line">  spark.append(e.target.result)</span><br><span class="line">  partSpark.append(e.target.result)</span><br><span class="line">  <span class="keyword">this</span>.chunkMd5List[currentChunk] = partSpark.end()</span><br><span class="line">  currentChunk++</span><br><span class="line">  <span class="keyword">this</span>.md5Progress = currentChunk / chunks * <span class="number">100</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(currentChunk &lt; chunks)&#123;</span><br><span class="line">    loadNext()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'finished loading'</span>);</span><br><span class="line">    <span class="keyword">this</span>.md5 = spark.end()</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'computed hash'</span>, <span class="keyword">this</span>.md5);  <span class="comment">// Compute hash</span></span><br><span class="line">    <span class="keyword">this</span>.upload()</span><br><span class="line">  &#125;</span><br><span class="line">  fileReader.onerror = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(<span class="string">'oops, something went wrong.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadNext()</span><br></pre></td></tr></table></figure>
<p>服务端一开始的想法是使用mongoDB数据库记录传输过来的每一个文件和文件块的存储状态，后面发现，数据库和文件系统不能很好的同步，后面实施就只使用文件系统来记录</p>
<p>目录结构如下，incoming文件夹存放分割的文件块，每个文件一个目录，目录下以{序号}-{文件块md5}为文件名存储文件块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server---incoming--&#123;文件md5&#125;--&#123;序号&#125;-&#123;文件块md5&#125;</span><br><span class="line">       |</span><br><span class="line">       |-archive--&#123;文件md5&#125;--&#123;文件名&#125;</span><br></pre></td></tr></table></figure>
<p>客户端传来文件md5，检查文件是否已上传完毕并合并：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> archiveFolder = <span class="keyword">await</span> fsPromises.stat(archiveFolderPath)</span><br><span class="line">  <span class="keyword">if</span>(archiveFolder)&#123;</span><br><span class="line">    <span class="keyword">const</span> archiveFolderFile = <span class="keyword">await</span> fsPromises.readdir(archiveFolderPath)</span><br><span class="line">    <span class="keyword">if</span>(archiveFolderFile.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(e)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>若未上传，检查已上传的文件块：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> incomingFolder = <span class="keyword">await</span> fsPromises.stat(incomingFolderPath)</span><br><span class="line">  <span class="keyword">if</span>(incomingFolder)&#123;</span><br><span class="line">    <span class="keyword">const</span> incomingFolderFiles = <span class="keyword">await</span> fsPromises.readdir(incomingFolderPath)</span><br><span class="line">    <span class="keyword">const</span> chunks = []</span><br><span class="line">    incomingFolderFiles.forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> nameInfo = fileName.split(<span class="string">'-'</span>)</span><br><span class="line">      chunks[nameInfo[<span class="number">0</span>]] = nameInfo[<span class="number">1</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> chunks</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> fsPromises.mkdir(incomingFolderPath)</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(e)</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> fsPromises.mkdir(incomingFolderPath)</span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为习惯使用async/await方式写异步代码（真的非常方便），所以全部fs的方法都用了fsPromise，结果在读/写文件内容的时候傻眼了，fsPromise没有stream的方法（想来也是，这两种方式原理是不一样的），只能把整个文件内容写进内存中再做业务读/写处理，后果当然就是内存挤爆了</p>
<p>最后用了async/await和stream的混合方式来写异步文件读写操作，虽然其中产生了<code>new Promise(async (resole, reject) =&gt;{...})</code>的promise套promise写法，但运行中是没有问题的</p>
<p>存储并计算文件块md5值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> uploadpartPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fmd5 = crypto.createHash(<span class="string">'md5'</span>)</span><br><span class="line">    <span class="keyword">const</span> folderStat = <span class="keyword">await</span> fsPromises.stat(incomingFolderPath)</span><br><span class="line">    <span class="keyword">if</span>(!folderStat || !folderStat.isDirectory())&#123;</span><br><span class="line">      <span class="keyword">await</span> fsPromises.mkdir(incomingFolderPath)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> incomingFilePath = path.resolve(incomingFolderPath, <span class="string">`<span class="subst">$&#123;index&#125;</span>-<span class="subst">$&#123;partMd5&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">const</span> readStream = fs.createReadStream(data.path)</span><br><span class="line">    <span class="keyword">const</span> writeStream = fs.createWriteStream(incomingFilePath, &#123;</span><br><span class="line">      flags: <span class="string">'w'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    readStream.pipe(writeStream)</span><br><span class="line">    readStream.on(<span class="string">'data'</span>, (chunk) =&gt; &#123;</span><br><span class="line">      fmd5.update(chunk)</span><br><span class="line">    &#125;)</span><br><span class="line">    readStream.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> uploadedPartMd5 = fmd5.digest(<span class="string">'hex'</span>)</span><br><span class="line">      <span class="keyword">if</span>(partMd5 === uploadedPartMd5) &#123;</span><br><span class="line">        uploadedChunks++</span><br><span class="line">        resolve()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.body = &#123;</span><br><span class="line">          code: <span class="number">-10</span>,</span><br><span class="line">          msg: <span class="string">'part md5 not match'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    reject(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> uploadpartPromise</span><br></pre></td></tr></table></figure>
<p>合并文件块时也用了同样的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fmd5 = crypto.createHash(<span class="string">'md5'</span>)</span><br><span class="line"><span class="keyword">const</span> getPartMergePromise = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> chunkMd5 = chunks[index]</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'append file index:'</span>, index)</span><br><span class="line">    <span class="keyword">const</span> currentFilePath = path.resolve(incomingFolderPath, <span class="string">`<span class="subst">$&#123;index&#125;</span>-<span class="subst">$&#123;chunkMd5&#125;</span>`</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(currentFilePath)</span><br><span class="line">    <span class="keyword">const</span> read = fs.createReadStream(currentFilePath)</span><br><span class="line">    <span class="keyword">const</span> write = fs.createWriteStream(archiveFilePath, &#123;</span><br><span class="line">      flags: <span class="string">'a'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    read.pipe(write)</span><br><span class="line">    read.on(<span class="string">'data'</span>, (chunk) =&gt; &#123;</span><br><span class="line">      fmd5.update(chunk)</span><br><span class="line">    &#125;)</span><br><span class="line">    read.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; chunks.length; index++)&#123;</span><br><span class="line">  <span class="keyword">await</span> getPartMergePromise(index)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fmd5.digest(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure>
<p>最后附上github地址: <a href="https://github.com/wenxiongid/big-file-upload" target="_blank" rel="noopener">https://github.com/wenxiongid/big-file-upload</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>要实现一个断点续传的上传组件需要前后端配合作信息比对，从前是使用flash的api作本地的文件分割、md5计算，但现在新的web api已经可以做到这部分的工作，现时纯使用HTML5已可实现以往需要外挂程序才能实现的功能；另一个角度是，现在web程序从其他语言（as3、C等等）翻译过来的也越来越多，之后前端的一个短期趋势应该是从其他语言学习架构、功能实现的方法应用在web客户端中<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 选择文件
e=>end: 文件已上传
opLocalMd5=>operation: 计算文件md5，发送到服务器
isServerFileExits=>condition: 检查文件是否存在
opServerGetUploadedChunks=>operation: 检查已上传的文件块
opSplit=>operation: 分割文件
opPartMd5=>operation: 计算文件块md5
isAllUploaded=>condition: 全部块上传完毕？
opUploadPart=>operation: 上传文件块，上报文件块md5
上报总文件md5
isPartMd5Same=>condition: 比对文件块md5
opSavePart=>operation: 存储文件块
opMerge=>operation: 合并文件
opServerMd5=>operation: 服务器计算md5
isMd5Same=>condition: md5值相同？
opError=>operation: 返回错误信息
opSaveFile=>operation: 存储文件

st->isServerFileExits
isServerFileExits(yes)->e
isServerFileExits(no)->opServerGetUploadedChunks->opSplit->opPartMd5->opUploadPart->isPartMd5Same
isPartMd5Same(no)->opUploadPart
isPartMd5Same(yes)->opSavePart->isAllUploaded
isAllUploaded(no)->opSplit
isAllUploaded(yes)->opMerge->opServerMd5->isMd5Same
isMd5Same(no)->opError
isMd5Same(yes)->opSaveFile(left)->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>微信手Q视频H5前人栽树记</title>
    <url>/2017/10/30/%E5%BE%AE%E4%BF%A1%E6%89%8BQ%E8%A7%86%E9%A2%91H5%E5%89%8D%E4%BA%BA%E6%A0%BD%E6%A0%91%E8%AE%B0/</url>
    <content><![CDATA[<p>视频播放在PC端跟移动端有很多表现不一样，在H5的开发过程中，<strong>一定要在真机测试，一定要在真机测试，一定要在真机测试</strong></p>
<h2 id="1-video对象可用的事件"><a href="#1-video对象可用的事件" class="headerlink" title="1. video对象可用的事件"></a>1. video对象可用的事件</h2><p>PC端可用的事件有很多，像<code>play</code>、<code>canplay</code>、<code>timeupdate</code>、<code>ended</code>、<code>paused</code>等等</p>
<p>但在移动端，信赖的事件只有<code>timeupdate</code>和<code>ended</code>，判断视频是否正在播放可通过<code>timeupdate</code>事件是否有触发判断</p>
<p>但视频在刚播放时有可能会加载还没完成而出现黑屏，但<code>timeupdate</code>事件此时也会触发，可结合判断<code>video.currentTime</code>是否大于<code>0</code>判断视频是否已经真正开始播放：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">video.addEventListener(<span class="string">'timeupdate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(video.currentTime &gt; <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="comment">//视频正在播放</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="2-视频的播放控制"><a href="#2-视频的播放控制" class="headerlink" title="2. 视频的播放控制"></a>2. 视频的播放控制</h2><p>移动端暂时没有一个通用的方法让视频在各个浏览器（微信、手Q、各种浏览器）自动播放，故固定交互模式为<strong>需要用户操作才可使视频开始播放，包括之后视频的切换也需用户操作</strong></p>
<p>视频文件需要用户的动作触发调用<code>video.play()</code>之后才会开始加载，且绑定的事件才会触发</p>
<h2 id="3-视频的行内显示"><a href="#3-视频的行内显示" class="headerlink" title="3. 视频的行内显示"></a>3. 视频的行内显示</h2><h3 id="3-1-iOS和手Q域名下微信和手Q的情况"><a href="#3-1-iOS和手Q域名下微信和手Q的情况" class="headerlink" title="3.1 iOS和手Q域名下微信和手Q的情况"></a>3.1 iOS和手Q域名下微信和手Q的情况</h3><p>iOS 10或以上系统里只需在<code>video</code>标签加上<code>playsinline</code>和<code>webkit-playsinline</code>即可实现行内显示，iOS 9可加入这个库：<a href="https://github.com/bfred-it/iphone-inline-video" target="_blank" rel="noopener">iphone-inline-video</a></p>
<p>html代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"a.mp4"</span> <span class="attr">playsinline</span> <span class="attr">webkit-playsinline</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>android平台若使用已加入白名单的域名，使用同样的属性可在微信和手Q实现与iOS基本一样的表现，但会在视频右上角显示<code>全屏</code>的按钮：</p>
<p><img src="http://img12.360buyimg.com/cms/jfs/t7669/79/3394930983/104490/873dce8d/59f6f05cN7b168dc7.jpg" alt=""></p>
<p>点击该<code>全屏</code>按钮，视频会脱离页面显示，绑定的事件处理也不会触发，会对页面逻辑有严重的影响；但浏览器没有提供方法隐藏该按钮，只能通过扩大视频范围配合容器的<code>overflow:hidden</code>属性把按钮“推出去”</p>
<h3 id="3-2-非手Q域名或在京东APP下的情况"><a href="#3-2-非手Q域名或在京东APP下的情况" class="headerlink" title="3.2 非手Q域名或在京东APP下的情况"></a>3.2 非手Q域名或在京东APP下的情况</h3><p>京东APP和微信、手Q在android系统下使用的都是QQ浏览器X5内核，但加入白名单后的域名在京东APP里也不能像微信、手Q一样行内播放视频，跟域名没入白名单的页面在微信、手Q里一样的表现</p>
<p>通过<a href="https://x5.tencent.com/tbs/guide/video.html" target="_blank" rel="noopener">X5内核的文档</a>可以找到让视频非全屏播放的方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">"a.mp4"</span> <span class="attr">x5-video-player-type</span>=<span class="string">"h5"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>但视频播放时表现会与iOS上表现不一样，在播放时会隐藏页面标题栏，整个页面会有一个拉伸的过程，播放停止时若把视频隐藏（设为<code>display:none</code>）也会有一个拉伸的过程回复到普通页面；在视频的播放过程中，需要点两次右上角的“返回”按钮才能关闭页面，第一次返回将停止视频并回到页面的普通状态，第二次将关闭页面。</p>
<h2 id="4-etc"><a href="#4-etc" class="headerlink" title="4. etc"></a>4. etc</h2><h3 id="4-1-开始时"><a href="#4-1-开始时" class="headerlink" title="4.1 开始时"></a>4.1 开始时</h3><p>测试过在iOS、安卓X5内核中<code>&lt;video&gt;</code>为<code>diaplay: none</code>时也可调用<code>play()</code>方法，但为保证其他浏览器的兼容性，还是建议先设成<code>diaplay: block</code>且宽高设为需展示大小再调用<code>play()</code>方法</p>
<h3 id="4-2-结束时"><a href="#4-2-结束时" class="headerlink" title="4.2 结束时"></a>4.2 结束时</h3><p>安卓X5内核在视频播放完毕后将会在中央显示播放按钮，有机会会显示广告……所以在视频播放后需将<code>&lt;video&gt;</code>设为<code>display: none</code></p>
<h3 id="4-3-中断视频"><a href="#4-3-中断视频" class="headerlink" title="4.3 中断视频"></a>4.3 中断视频</h3><p>在视频播放中需要中断（如跳过此段视频播放下一段），先需调用<code>video.pause()</code>停止当前视频的播放，但此时视频还会继续加载，占用后面资源加载的带宽，所以还要把<code>video.src</code>设为空<code>&#39;&#39;</code>，当视频需要重新播放时，再把原来的视频地址设回到<code>video.src</code></p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Mobile</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>微信H5页面动画与闪退</title>
    <url>/2017/01/10/%E5%BE%AE%E4%BF%A1H5%E9%A1%B5%E9%9D%A2%E5%8A%A8%E7%94%BB%E4%B8%8E%E9%97%AA%E9%80%80/</url>
    <content><![CDATA[<p>最近做一个移动页面闯了个祸，先看看长什么样子的：</p>
<p><a href="https://h5.m.jd.com/dev/V4vE962o9aCGtEhB5xc5RyePqxp/index.html" target="_blank" rel="noopener">https://h5.m.jd.com/dev/V4vE962o9aCGtEhB5xc5RyePqxp/index.html</a></p>
<p><img src="https://img14.360buyimg.com/cms/jfs/t3961/157/1563697734/2018/373b0a49/58803996Neb893b04.png" alt=""></p>
<p>在最终上线前，出现了这样的一个bug：</p>
<p>在 iPhone 6 Plus 的机型上，手Q和微信的 webview 中访问这个页面，翻到第三、四页的时候必定闪退</p>
<p>之前在我的 iPhone 6 上测试时也偶尔会出现这个情况，但在升级了微信到 6.5.3 版本后就没重现过，当时猜想是微信的问题而没去留意</p>
<p>但测试在 6 Plus 上始终能重现这个bug，就想这次奶野了，没多少个小时就要上线了，就用上之前想的一个没加上优化方法，还好解决了</p>
<p>先说说解决方法，很简单的：把不显示的分页设成 <code>display: none;</code></p>
<p>第二天想这是什么原因呢，就做了下面的测试：</p>
<a id="more"></a>
<h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>仿照解决bug前做的简单demo：</p>
<p><a href="http://junewu.work/app/dreaming/cert/test1.html" target="_blank" rel="noopener">https://junewu.work/app/dreaming/cert/test1.html</a></p>
<p><img src="https://img30.360buyimg.com/cms/jfs/t3055/121/5526296430/1973/931b58d7/5874bad7N1ac20430.png" alt=""></p>
<p>跟原来的H5一样，采取分页式展示，每页有一个keyframes动画，demo用了一个两帧的逐帧动画模拟，动画只在屏幕显示的时候做动作，未进入屏幕和退出屏幕后停止动作</p>
<p>在 iPhone 6 的 QQ 里的 webview 打开此页面，测试添加分页，当添加到160左右出现闪退现象，微信的 webview 也差不多，150个分页后出现闪退，比较意外的是 safari 浏览器打开，到130个分页左右就页面重置了，比上面的表现都差点</p>
<p>然后是根据之前的解决方法，把不在当前屏幕显示的分页都做<code>display: none</code>处理</p>
<p><a href="http://junewu.work/app/dreaming/cert/test2.html" target="_blank" rel="noopener">https://junewu.work/app/dreaming/cert/test1.html</a></p>
<p><img src="https://img12.360buyimg.com/cms/jfs/t4108/218/1443315332/1962/4f20d841/58772df1N6ab0f389.png" alt=""></p>
<p>在几个webview、浏览器中都顺利超过数百个分页，性能还没有降低；两个测试对比，说明影响闪退发生的是分页是否显示；猜测是屏幕外的分页还在渲染导致资源占用过高造成</p>
<h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>是不是逐帧动画影响了资源占用？本来按照CSS样式，不在屏幕里的分页动画是停止的，但浏览器的表现总有这样那样的差错，第二个测试就把所有的动画都停止</p>
<p>这个页面把所有的动画都取消了：</p>
<p><a href="http://junewu.work/app/dreaming/cert/test1_1.html" target="_blank" rel="noopener">https://junewu.work/app/dreaming/cert/test1_1.html</a></p>
<p><img src="https://img12.360buyimg.com/cms/jfs/t3889/35/1457657261/1906/bc52dfe8/58774367Nead82b1b.png" alt=""></p>
<p>作为对比，下面的页面停止了动画，在屏幕外的分页也做了<code>display:none</code>处理</p>
<p><a href="http://junewu.work/app/dreaming/cert/test1_1.html" target="_blank" rel="noopener">https://junewu.work/app/dreaming/cert/test1_1.html</a></p>
<p><img src="https://img10.360buyimg.com/cms/jfs/t3103/246/5615113485/1948/89a59553/58774407Ncb39def7.png" alt=""></p>
<p>结果是，跟有动画时一样，在150~160个分页左右出现闪退，那其实这几个浏览器的渲染应该还是没有问题的，只是闪退跟当前是否显示动画没关</p>
<h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>上面的测试说明，在现在测试的几个变量中，闪退只跟不是<code>display:none</code>的分页数量有关，想到每个分页的切换位置是使用<code>transform: translate3d</code>来实现的，那如果换成<code>top</code>来实现，是否能改善呢？下面再做个测试</p>
<p><a href="http://junewu.work/app/dreaming/cert/test1_3.html" target="_blank" rel="noopener">https://junewu.work/app/dreaming/cert/test1_3.html</a></p>
<p><img src="https://img30.360buyimg.com/cms/jfs/t3982/64/1446522174/1938/44da7eec/587897afN856d9f68.png" alt=""></p>
<p>把<code>transform: translate3d</code>换成用<code>top</code>之后闪退的现象没出现了，一直增加到1000个分页以上都还很稳定；在这里闻到了一点「硬件加速」的味道，大概闪退的根源差不多快要找到了</p>
<p>之后再把<code>transform</code>用回来，不过用<code>translateY</code>替换原来的<code>translate3d</code>:</p>
<p><a href="http://junewu.work/app/dreaming/cert/test2_3.html" target="_blank" rel="noopener">https://junewu.work/app/dreaming/cert/test2_3.html</a></p>
<p><img src="https://img11.360buyimg.com/cms/jfs/t4111/56/1560323884/1918/4f9af8a4/5878aaf6N30697253.png" alt=""></p>
<p>闪退现象也没重现了，熟悉CSS3属性的应该都了解过，使一个元素使用硬件加速的简单方法就是为它加上<code>transform: translate3d(0, 0, 0)</code>，那么现在我们就可以确定，闪退的出现就跟使用了「硬件加速」的元素数量有关了</p>
<h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p>之前的H5为什么在 iPhone 6上较难重现，在iPhone 6 Plus 上又必定能重现呢？回看一下屏幕分辨率自适应的实现方式，是通过获取屏幕宽高来定义分页的<code>transform: scale</code>属性来实现类似<code>background-size: contain</code>的适应方式的。于是得出在两台手机上，只有元素占的面积不同！6 Plus 上占的面积比 6 上的大，于是最后做了以下的测试页来验证猜想：</p>
<p><a href="http://junewu.work/app/dreaming/cert/test1_4.html" target="_blank" rel="noopener">https://junewu.work/app/dreaming/cert/test1_4.html</a></p>
<p><img src="https://img11.360buyimg.com/cms/jfs/t3265/99/5772327361/1944/4e6e16f3/587f5a4bN7fc3f5e7.png" alt=""></p>
<p>闪退提前在40~50个分页的时候出现。到了这步基本可以断定闪退跟「有硬件加速的非隐藏的元素总面积」有关了</p>
<p>总结一下几个测试的结果：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>页面表现</th>
<th>闪退情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>分页<code>translate3d</code>、<code>scale(0.35)</code>，退场不隐藏，有逐帧动画</td>
<td>150~160个分页</td>
</tr>
<tr>
<td>分页<code>translate3d</code>、<code>scale(0.35)</code>，退场隐藏，有逐帧动画</td>
<td>不出现</td>
</tr>
<tr>
<td>分页<code>translate3d</code>、<code>scale(0.35)</code>，退场不隐藏，无逐帧动画</td>
<td>150~160个分页</td>
</tr>
<tr>
<td>分页<code>translate3d</code>、<code>scale(0.35)</code>，退场隐藏，无逐帧动画</td>
<td>不出现</td>
</tr>
<tr>
<td>分页<code>top</code>、<code>scale(0.35)</code>，退场不隐藏，无逐帧动画</td>
<td>不出现</td>
</tr>
<tr>
<td>分页<code>translateY</code>、<code>scale(0.35)</code>，退场不隐藏，无逐帧动画</td>
<td>不出现</td>
</tr>
<tr>
<td>分页<code>translate3d</code>、<code>scale(1)</code>，退场不隐藏，无逐帧动画</td>
<td>40~50个分页</td>
</tr>
</tbody>
</table>
</div>
<p>按测试页面上元素的大小<code>1015px * 1000px</code>（应用scale前的大小）计算，造成闪退的元素总大小阈值应该在53287500~56840000之间，按iPhone 6 的屏幕大小计算，可以撑住两百多屏分页，当然实际项目页面可能会有多个动画、表现层叠加，可以支持的分页数量应该会比估计的少很多</p>
<p>当然如果做好退场/未进场的页面隐藏，可以不用像这样拿着计算器去算还剩多少面积可以用，这个应该算是渲染方面的一种手动gc吧</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>树状数组</title>
    <url>/2016/04/29/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>近日在<a href="http://www.qlcoder.com/" target="_blank" rel="noopener">千里码</a>刷题，做到一道<a href="http://www.qlcoder.com/task/7542" target="_blank" rel="noopener">数据统计问题</a>的时候，发现粗暴的做法费时又费电（风扇狂响了数分钟），看看别人的方法一秒不到就解出了，然后看<a href="https://zh.wikipedia.org/wiki/树状数组" target="_blank" rel="noopener">数状数组</a>的定义发觉脑子太久没用了转不过来，特纪录下理解过程。</p>
<p>数状数组的定义：</p>
<p>结合维基百科的条目与<a href="http://www.cnblogs.com/zichi/p/4806998.html" target="_blank" rel="noopener">别人的博客</a>，理解数状数组<code>C</code>与原数组<code>A</code>的关系为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">C[n] = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret = A[n];</span><br><span class="line">	</span><br><span class="line">  <span class="keyword">for</span>(j = i - <span class="number">1</span>; j &gt; i - lowbit(i); j--)&#123;</span><br><span class="line">    ret += A[j];</span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;)(n);</span><br></pre></td></tr></table></figure>
<p>这<code>lowbit</code>是什么鬼呢？是表示一个数<code>n</code>使用二进制表示时，最右边的<code>1</code>所在表示的值</p>
<p>如<code>6</code>的二进制表示为<code>110</code>，从个位开始数的第一个<code>1</code>在第二位，表示的数就是<code>2 ^ 2 = 4</code>，所以<code>lowbit(6) = 4</code></p>
<p>代入上面的公式，<code>C[6] = A[6] + A[5]</code></p>
<p>用二进制表示會清晰一点：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>进制</th>
<th>C</th>
<th>A</th>
</tr>
</thead>
<tbody>
<tr>
<td>十进制</td>
<td>6</td>
<td>6 + 5</td>
</tr>
<tr>
<td>二进制</td>
<td>110</td>
<td>110 + 101</td>
</tr>
</tbody>
</table>
</div>
<p><code>110</code>减去<code>lowbit</code>的操作相当于把二进制表示的值的最右边一位<code>1</code>置<code>0</code>，得到<code>100</code>，<code>C[6]</code>的值包含<code>110</code>到<code>100</code>(不含)的值的和</p>
<p>这样定义的好处是可快速的算出<code>A[1]~A[n]</code>的和，同样用二进制表示前缀，如<code>n = 40</code>，二进制表示为<code>101000</code>，可快速算出<code>A[1]~A[40]</code>的和为<code>C[40] + C[32]</code>（即二进制表示的<code>C[101000] + C[100000]</code>），代码公式表示为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">SUM[n] = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j = i; i &gt; <span class="number">0</span>; i -= lowbit(i))&#123;</span><br><span class="line">    ret += C[i];</span><br><span class="line">  &#125;</span><br><span class="line">	</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;)(n);</span><br></pre></td></tr></table></figure>
<p>构造和求和的方法都有了，还需要当<code>A[n]</code>数组更新时<code>C[n]</code>数组的更新方法</p>
<p>从<code>C[n]</code>的构造方法看到，<code>A[n]</code>的变化首先影响到<code>C[n]</code>的值，然后向上影响<code>C[n + lowbit(n)]</code>的值，然后继续向上迭代影响<code>i + lowbit(i)</code>的值（<code>i</code>为每次更新的<code>C[i]</code>的前綴）</p>
<p>因此值变化的公式有：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">i, diff</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j = i; j &lt; MAX_N; j += lowbit(j))&#123;</span><br><span class="line">    C[j] += diff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>diff</code>为<code>A[n]</code>变化的值</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>Data Structures &amp; Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>关于flash导出的canvas的使用事项</title>
    <url>/2016/03/17/%E5%85%B3%E4%BA%8Eflash%E5%AF%BC%E5%87%BA%E7%9A%84canvas%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>现在Flash可以很方便的导出canvas了，制作canvas动画比自己一行代码一行代码写要舒服多了，但输出的代码嵌入到具体的页面，还要做一些工作</p>
<h2 id="1-依赖的引用"><a href="#1-依赖的引用" class="headerlink" title="1. 依赖的引用"></a>1. 依赖的引用</h2><p>输出的html文件会调用以下等等的外部js文件，如果flash中还调用了音频，还可能会有其它库文件（可能有一种stand alone的导出方式？），原代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.createjs.com/easeljs-0.7.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.createjs.com/tweenjs-0.5.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.createjs.com/movieclip-0.7.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.createjs.com/preloadjs-0.4.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>由于国内访问速度问题和外链的限制，需要先把这批代码做本地CDN或内联处理</p>
<h2 id="2-资源文件的重定位"><a href="#2-资源文件的重定位" class="headerlink" title="2. 资源文件的重定位"></a>2. 资源文件的重定位</h2><p>输出的项目js代码中，定义了一个<code>lib.properties</code>对象，里面存放的是整体动画的配置，如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// library properties:</span></span><br><span class="line">lib.properties = &#123;</span><br><span class="line">	width: <span class="number">250</span>,</span><br><span class="line">	height: <span class="number">528</span>,</span><br><span class="line">	fps: <span class="number">24</span>,</span><br><span class="line">	color: <span class="string">"#000000"</span>,</span><br><span class="line">	manifest: [</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/foryou.png"</span>, <span class="attr">id</span>:<span class="string">"foryou"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/照片1.jpg"</span>, <span class="attr">id</span>:<span class="string">"照片1"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/照片2.jpg"</span>, <span class="attr">id</span>:<span class="string">"照片2"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/happy.png"</span>, <span class="attr">id</span>:<span class="string">"happy"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/手机_.png"</span>, <span class="attr">id</span>:<span class="string">"手机"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/logo.png"</span>, <span class="attr">id</span>:<span class="string">"logo"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/_new.png"</span>, <span class="attr">id</span>:<span class="string">"_new"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/title.png"</span>, <span class="attr">id</span>:<span class="string">"title"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/title2016.png"</span>, <span class="attr">id</span>:<span class="string">"title2016"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/year.png"</span>, <span class="attr">id</span>:<span class="string">"year"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/云1.png"</span>, <span class="attr">id</span>:<span class="string">"云1"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/云2.png"</span>, <span class="attr">id</span>:<span class="string">"云2"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/云3.png"</span>, <span class="attr">id</span>:<span class="string">"云3"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/云4.png"</span>, <span class="attr">id</span>:<span class="string">"云4"</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">src</span>:<span class="string">"images/云5.png"</span>, <span class="attr">id</span>:<span class="string">"云5"</span>&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其中的文件也需要做CDN处理，替换其中的<code>src</code>属性即可，<code>id</code>的值不要修改</p>
<h2 id="3-动画与外部js的数据交换"><a href="#3-动画与外部js的数据交换" class="headerlink" title="3. 动画与外部js的数据交换"></a>3. 动画与外部js的数据交换</h2><h3 id="flash暴露方法供外部调用"><a href="#flash暴露方法供外部调用" class="headerlink" title="flash暴露方法供外部调用"></a>flash暴露方法供外部调用</h3><p>flash中的外部方法需要通过内建的<code>exportRoot</code>对象暴露，如希望暴露一个<code>play()</code>方法，flash中的代码需要如下编写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> play = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span>.play = play;</span><br></pre></td></tr></table></figure>
<p>当嵌入到项目代码中后，会定义一个<code>exportRoot</code>的全局对象，所有flash暴露的外部方法都在此对象中，如需调用上面的<code>play</code>方法，项目中的js代码只需这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">exportRoot.play();</span><br></pre></td></tr></table></figure>
<h3 id="flash调用外部方法"><a href="#flash调用外部方法" class="headerlink" title="flash调用外部方法"></a>flash调用外部方法</h3><p>外部定义全局方法，如<code>isReady()</code>，flash中直接调用<code>isReady()</code>就可以</p>
<h2 id="flash状态判断"><a href="#flash状态判断" class="headerlink" title="flash状态判断"></a>flash状态判断</h2><p>由于flash中也需要引用外部资源，但暴露的方法在代码执行的时候就定义到<code>exportRoot</code>中了</p>
<p>于是有可能出现暴露的方法需要外部资源，但这些外部资源还没加载好，导致方法不能成功执行</p>
<p>为避免这一现象可用以下方法：</p>
<ol>
<li><p>在外部js中定义一个<code>isReady()</code>方法，当这个方法被调用时即表示flash的资源已准备好 </p>
</li>
<li><p>在flash的第一帧中调用外部的<code>isReady()</code>方法，把本flash的准备状态通知外部js</p>
</li>
</ol>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>rem使用注意事项</title>
    <url>/2015/12/16/rem%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>最近在用rem做mobile webpage的开发，途中遇到不少坑，为防年纪大记性差留个记录。</p>
<p>rem的使用：</p>
<p>原理上来说是使用根元素（<code>html</code>）的font-size大小来计算每一个元素的所有跟尺寸有关的数值，包括但不限于<code>width</code>、<code>height</code>、<code>margin</code>、<code>padding</code>、<code>font-size</code>、<code>line-height</code>、<code>top</code>、<code>left</code>、<code>right</code>、<code>bottom</code>、<code>background-position</code>、<code>background-size</code>……</p>
<p>在LESS上使用的话换算挺简单的，定义一个转换函数，参数传入原始的像素值，返回计算后的rem值就好了。</p>
<p>先定义各个情况下的rem值，这里直接用了腾讯isux的配置<a href="http://isux.tencent.com/web-app-rem.html" target="_blank" rel="noopener">http://isux.tencent.com/web-app-rem.html</a>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size </span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">401px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">428px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">26.75px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">481px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">569px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">35px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (min-width: <span class="number">641px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span> <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再定义我们的转换函数，因为我们的移动端设计稿是按640的宽度做的，所以除以的系数为页面宽度<code>640px</code>时的rem <code>40px</code>：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@px2rem:</span> <span class="built_in">~`px2rem = function(size)&#123; return (size / 40) + 'rem'; &#125;`</span>;</span><br></pre></td></tr></table></figure>
<p>准备工作完成了，然后下面的元素本来用<code>px</code>表示的尺寸的换成调用函数就好了。比如：</p>
<p>原来的写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#030303</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>带转换的写法：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="built_in">~`px2rem(36)`</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="built_in">~`px2rem(36)`</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="built_in">~`px2rem(6)`</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">~`px2rem(20)`</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#030303</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改写方法很简单，下面来看一个具体例子，通常活动的头图都很大，我们回切成好几片做拼接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-content"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img12.360buyimg.com/cms/jfs/t2512/97/854580732/40093/bd85d483/566e5ea9N9ec31fc7.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-content"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img11.360buyimg.com/cms/jfs/t2125/71/1650398095/36549/20121f4a/566e5eaaN83135a5c.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"android-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"ios-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>以前的css写法：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">  <span class="selector-class">.header-bg</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> auto;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.header-bg1</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'http://img12.360buyimg.com/cms/jfs/t2512/97/854580732/40093/bd85d483/566e5ea9N9ec31fc7.jpg'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.header-bg2</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'http://img11.360buyimg.com/cms/jfs/t2125/71/1650398095/36549/20121f4a/566e5eaaN83135a5c.jpg'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把px改成rem：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">  <span class="selector-class">.header-bg</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">~`px2rem(200)`</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> auto;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.header-bg1</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'http://img12.360buyimg.com/cms/jfs/t2512/97/854580732/40093/bd85d483/566e5ea9N9ec31fc7.jpg'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.header-bg2</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'http://img11.360buyimg.com/cms/jfs/t2125/71/1650398095/36549/20121f4a/566e5eaaN83135a5c.jpg'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>demo页面：<a href="http://junewu.work/app/dreaming/rem_demo/demo1.html" target="_blank" rel="noopener">demo1.html</a></p>
<p>现在页面在iPhone4~5上看应该是正常的，但是如果你用了另一种分辨率看，两张图｀出现错位了；为什么呢？这样的写法是严格按照<code>320/640px</code>的分辨率写的，在iPhone4~5这些分辨率宽度是320的设备上表现会是正常，但在其他分辨率出错，因为这两张图的容器没有按比例缩放，我们再看回之前写的css，只定义了高度的rem，没定义宽度，块元素的宽度默认是<code>100%</code>，问题就在这宽跟高用了不同的单位，所以容器没有按比例缩放</p>
<p>=========</p>
<p>所以要注意的第一个点：</p>
<h3 id="需要按比例缩放的元素，宽高单位需统一"><a href="#需要按比例缩放的元素，宽高单位需统一" class="headerlink" title="需要按比例缩放的元素，宽高单位需统一"></a>需要按比例缩放的元素，宽高单位需统一</h3><p>=========</p>
<p>怎么解决这个问题呢？</p>
<hr>
<h4 id="方法一：用原生的img元素等比缩放特性来撑起高度"><a href="#方法一：用原生的img元素等比缩放特性来撑起高度" class="headerlink" title="方法一：用原生的img元素等比缩放特性来撑起高度"></a>方法一：用原生的<code>img</code>元素等比缩放特性来撑起高度</h4><p>html代码改成如下，图片改成行内<code>&lt;img&gt;</code>元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-bg header-bg1"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img12.360buyimg.com/cms/jfs/t2512/97/854580732/40093/bd85d483/566e5ea9N9ec31fc7.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-bg header-bg2"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img11.360buyimg.com/cms/jfs/t2125/71/1650398095/36549/20121f4a/566e5eaaN83135a5c.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意<code>&lt;img&gt;</code>元素的<code>vertical-align</code>要设成<code>baseline</code>以外的值，不然<code>&lt;img&gt;</code>元素与容器会有间隙，容器的<code>line-height</code>要设成<code>0</code>，不然容器的最小高度等于行高，再小就会出现间隙，最后的css如下：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">  <span class="selector-class">.header-bg</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="selector-tag">img</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">vertical-align</span>: top;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>demo页面：<a href="http://junewu.work/app/dreaming/rem_demo/demo2.html" target="_blank" rel="noopener">demo2.html</a></p>
<p>这种方法优点是css代码简单，缩放使用浏览器原生表现；缺点是图片加载前到完成的过程高度会一直变化</p>
<hr>
<h4 id="方法二：高度也使用百分比定义"><a href="#方法二：高度也使用百分比定义" class="headerlink" title="方法二：高度也使用百分比定义"></a>方法二：高度也使用百分比定义</h4><p>由于宽度必须是100%，定义高度的单位也需统一成百分比。高度的数值也像<code>rem</code>一样通过计算出来，计算的分母是该容器父容器的高度。在这个例子里就是<code>.header</code>的高度。</p>
<p>=========</p>
<p>注意：如果该容器的<code>position</code>值<strong>不是</strong><code>static</code>或<code>relative</code>，那百分比的相对尺寸元素会是对应定位元素，如<code>fixed</code>的元素对应的是<code>body</code>元素的宽高；<code>absolute</code>的元素对应的是它的上级元素中最近的<code>position</code>不为<code>static</code>的元素</p>
<p>=========</p>
<p>但是，这时候父容器（这里是<code>.header</code>）的高度需要定义，但又需要用百分比表示，但<code>.header</code>的父容器就是<code>body</code>了，<code>body</code>的高度会随着页面的内容变化，所以这里就不能用<code>height: xx%</code>定义高度了；这里用一个特殊的属性<code>padding-bottom</code>(<code>padding</code>、<code>margin</code>属性使用百分比时，竖直方向的数值计算时使用的不是父元素的高度，<strong>而是父元素的宽度</strong>)，<code>.header</code>里加一个<code>.placeholder</code>，<code>height</code>设为<code>0</code>，<code>padding-bottom</code>设成<code>.hedaer高度 / body宽度</code>，此处为<code>350 / 640 = 54.6875%</code>，现在<code>.header</code>的高度就被撑起来了。</p>
<p>现在高度撑起来了，但原来放图的地方被<code>.placeholder</code>君占了，原来的<code>.header-bg</code>只能用绝对定位放回它们该在的位置了，不要忘记<code>top</code>的值也要用百分比定义，这里就用<code>切片y位置 / 父容器高度</code>就可以算出来了。</p>
<p>html代码沿用demo1的，再加上<code>.placeholder</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"placeholder"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-bg header-bg1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-bg header-bg2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>设计稿中，这个头部在设计稿的高度是<code>350px</code>，每块切片的高度是<code>200px</code>，所以高度应该是<code>200 / 350 = 57.142857%</code></p>
<p>css代码如下：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="selector-class">.placeholder</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">54.6875%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.header-bg</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">57.142857%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">100%</span> auto;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.header-bg1</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'http://img12.360buyimg.com/cms/jfs/t2512/97/854580732/40093/bd85d483/566e5ea9N9ec31fc7.jpg'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.header-bg2</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">57.142857%</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'http://img11.360buyimg.com/cms/jfs/t2125/71/1650398095/36549/20121f4a/566e5eaaN83135a5c.jpg'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>demo页面：<a href="http://junewu.work/app/dreaming/rem_demo/demo3.html" target="_blank" rel="noopener">demo3.html</a></p>
<p>这种方法可以避免在图片没装载出来的时候高度坍塌的问题，缺点是计算量增多，html里也多了个元素。</p>
<hr>
<h4 id="方法三：使用多个background-image"><a href="#方法三：使用多个background-image" class="headerlink" title="方法三：使用多个background-image"></a>方法三：使用多个<code>background-image</code></h4><p>如果在我们的<code>.header</code>里没有其他子元素，只是一个纯展示图片的区域，可以把<code>padding-bottom</code>写在<code>.header</code>上，图片用多个<code>background-image</code>的形式展示</p>
<p>html代码很简单，就一个元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css部分麻烦点，<code>background-image</code>使用百分数定位时，表现的形式是图的百分比对齐容器的百分比，例如<code>background-position: 0 20%</code>表示图片竖直方向<code>20%</code>的位置对齐容器<code>20%</code>的位置，计算方式可参照以下方程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">图片竖直方向位移 + 图片高度 * x = 容器高度 * x</span><br></pre></td></tr></table></figure>
<p>方程的解即为<code>background-position</code>的值</p>
<p>计算得出的css为：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">54.6875%</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">'http://img12.360buyimg.com/cms/jfs/t2512/97/854580732/40093/bd85d483/566e5ea9N9ec31fc7.jpg'</span>),</span><br><span class="line">    url(<span class="string">'http://img11.360buyimg.com/cms/jfs/t2125/71/1650398095/36549/20121f4a/566e5eaaN83135a5c.jpg'</span>);</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span> <span class="number">100</span> / <span class="number">101</span> * <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> auto;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法的优点是html代码简单，高度的问题也解决了；缺点是限制了不能有子元素，计算量也多，设计稿一修改都要重新算</p>
<hr>
<p>好了，搞了这么久终于搞定图片的拼接显示问题，那如果我们在这区域内还要加上子元素（例如一些链接）呢？</p>
<p>由于要加子元素，前面的方法三就不能用了，方法一跟方法二都可以，在这里先使用方法一的写法做示例。</p>
<p>我们不信邪在子元素上用rem试试</p>
<p>html代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-bg header-bg1"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img12.360buyimg.com/cms/jfs/t2512/97/854580732/40093/bd85d483/566e5ea9N9ec31fc7.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-bg header-bg2"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img11.360buyimg.com/cms/jfs/t2125/71/1650398095/36549/20121f4a/566e5eaaN83135a5c.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"android-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> <span class="attr">class</span>=<span class="string">"ios-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>css代码，这里子元素的两个链接背景用了<code>rgba(0, 0, 0, 0.5)</code>标示，让我们更好观察它们：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="selector-class">.header-bg</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="selector-tag">img</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">vertical-align</span>: top;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.android-link</span>,</span><br><span class="line">  <span class="selector-class">.ios-link</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">~`px2rem(174)`</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">~`px2rem(48)`</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="built_in">~`px2rem(144)`</span>;</span><br><span class="line">    <span class="attribute">background</span>: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.android-link</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">~`px2rem(198)`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.ios-link</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="built_in">~`px2rem(257)`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>demo页面：<a href="http://junewu.work/app/dreaming/rem_demo/demo5.html" target="_blank" rel="noopener">demo5</a></p>
<p>唔……还是跟我们之前混用单位一样，在<code>320/640px</code>时表现正常，其他情况嘛……就跟一只停了的手表一样，每天只有两次是准时的。</p>
<p>原因大概大家也猜到了，是父元素、子元素单位混用引起的</p>
<p>=========</p>
<p>所以要注意的第二个点：</p>
<h3 id="需要按比例缩放的元素，其子元素的单位也要与父元素统一"><a href="#需要按比例缩放的元素，其子元素的单位也要与父元素统一" class="headerlink" title="需要按比例缩放的元素，其子元素的单位也要与父元素统一"></a>需要按比例缩放的元素，其子元素的单位也要与父元素统一</h3><p>=========</p>
<p>这次解决方法就没这么多花样了，<code>.header</code>是用百分比指定宽高的，子元素也用百分比指定就好了。不只是宽高，定位的数值也要使用百分比。</p>
<p>css改成这样：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="selector-class">.header-bg</span>&#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="selector-tag">img</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">      <span class="attribute">vertical-align</span>: top;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.android-link</span>,</span><br><span class="line">  <span class="selector-class">.ios-link</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">width</span>: (<span class="number">174</span> / <span class="number">640</span> * <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">height</span>: (<span class="number">48</span> / <span class="number">350</span> * <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">left</span>: (<span class="number">144</span> / <span class="number">640</span> * <span class="number">100%</span>);</span><br><span class="line">    <span class="attribute">background</span>: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.android-link</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>: (<span class="number">198</span> / <span class="number">350</span> * <span class="number">100%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.ios-link</span>&#123;</span><br><span class="line">    <span class="attribute">top</span>: (<span class="number">257</span> / <span class="number">350</span> * <span class="number">100%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了，现在这两个链接跟背景图紧密结合了</p>
<p>demo页面：<a href="http://junewu.work/app/dreaming/rem_demo/demo6.html" target="_blank" rel="noopener">demo6</a></p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>Mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>OSX下的dircolor</title>
    <url>/2015/08/27/OSX%E4%B8%8B%E7%9A%84dircolor/</url>
    <content><![CDATA[<p>偶然看到一个github库<a href="https://github.com/seebi/dircolors-solarized" target="_blank" rel="noopener">dircolors-solarized</a>，刚好我在iTerm用的也是solarized的配色，OSX下终端的ls出来也只有简单的几种颜色，一眼看过去密密麻麻的都不知道是什么文件，看到这个心想终于有个好的解决方案了，立刻看着installation来做</p>
<p>把仓库clone到本地，把<code>dircolors.ansi-universal</code>复制到<code>~/.dir_colors</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp dircolors.ansi-universal ~/.dir_colors</span><br></pre></td></tr></table></figure>
<p>然后运行<code>eval &#39;dircolors ~/.dir_colors&#39;</code></p>
<p>咦？出现错误<code>zsh: command not found: dircolors</code></p>
<p>没有<code>dircolors</code>这个命令？说明里没说有这个情况的啊，google一下，得到了<a href="http://unix.stackexchange.com/questions/91937/mac-os-x-dircolors-not-found" target="_blank" rel="noopener">说明</a>是：<code>dircolors</code>是<code>GNU coreutils</code>的专有命令，OSX就没有咯。那就是这个库的方法用不了了？</p>
<p>再google一下，发现GNU的<code>ls</code>是可以通过<code>brew install coreutils</code>安装的，刚输完前面的命令发现以前已经装过了，er…</p>
<p>好吧，那直接在shell的配置文件加上<code>alias ls=&quot;gls --color=auto&quot;</code>应该就可以了，我用的是<code>zsh</code>，于是加进<code>~/.zshrc</code>。加上后，晕了，弹出这么一个错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/bin/ls: illegal option -- -</span><br><span class="line">usage: ls [-ABCFGHLOPRSTUWabcdefghiklmnopqrstuwx1] [file ...]</span><br></pre></td></tr></table></figure>
<p>这是什么鬼回事？明明都加了alias了啊？看这错误提示调用的还是<code>/bin/ls</code>，这是OSX自带的<code>ls</code>喔…</p>
<p>想起了<code>which -a</code>命令可以查看一个命令的全部版本（还是同名的文件？不会表达），那alias的命令能不能列出来呢？试一下<code>which -a ls</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls: aliased to ls -G</span><br><span class="line">/bin/ls</span><br></pre></td></tr></table></figure>
<p>噢，真的有！什么时候<code>ls</code> alias成<code>ls -G</code>了？我的<code>gls</code>呢？看来在我的alias后面又被其他文件里的配置被alias了，唉，这个<code>which</code>只能看被alias成什么，看不到在哪里被alias的啊，google一轮后也找不到，那只能每次打开终端都输一次<code>alias ls=&quot;gls --color=auto&quot;</code>吗？</p>
<p>想起我在用的iTerm有个<code>Send text at start</code>选项（在Preferences—&gt;Profile—&gt;General），可以在每次打开终端窗口的时候输入这行指令，那我想到最后的方法就是把这行命令放到这里了，总比每次手输要好吧，吧</p>
<p>啊，最后忘记了，还要运行<code>dircolor</code>的，现在要改成<code>gdircolor</code>了，完整的命令是<code>gdircolor ~/.dir_colors</code>，这行代码就加到<code>~/.zshrc</code>中。修改好后再执行<code>source ~/.zshrc</code></p>
<p>好了，最后重启iTerm，<code>ls</code>一下，终于搞定了</p>
<p>最后还是没找到这<code>ls -G</code>是在哪里被alias的，有没有一个命令是可以找到alias的配置文件的呢？</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>OSX</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo blog搭建</title>
    <url>/2015/08/06/Hexo-blog%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>前几天终于狠下心来把vps配了个域名，然后就开始想把blog的东西从farbox转回来了；逛V2EX看见了Hexo这一静态博客也是用markdown写的，习惯了markdown后就不想再用那些富文本，迁移工作量也少，就用它了。</p>
<p>Hexo卖点是用Node.js能快速生成站点，且自带Node.js的web服务器。web服务器我vps上已有一个nginx的站点了，参照了<a href="http://blog.berry10086.com/Tech/deploy-hexo-to-vps/" target="_blank" rel="noopener">这篇博文</a>的介绍，仿照他的做法，使用git部署页面文件到nginx的网站目录</p>
<p>一路照做下来，觉得里面写到的服务器有页面文件替换部分有些繁琐（clone到tmp目录—&gt;清空站点目录—&gt;复制tmp文件到站点目录），就想直接在站点目录做<code>git pull</code>操作就好了，不是手动修改过站点目录的文件的话<code>pull</code>操作应该是不会有错误出现的，而且文章里的做法git帐号需要有操作站点目录的权限、总觉得有哪里不对……</p>
<p>于是改了一下方法，想是<code>cd</code>到站点目录执行<code>git pull</code>，但这样做其实也是需要修改站点目录的权限的，而且修改后即等于修改了文件，执行<code>pull</code>操作会报错文件不符需<code>commit</code>和<code>merge</code>，那怎么办呢？在vps上捣弄半天，不如用<code>sudo git pull</code>吧，一行解决了两个问题，root权限操作站点目录不需修改权限，用pull命令也不用把文件弄来弄去了，好，写脚本去了</p>
<p>试验了下用git帐号用不了<code>sudo</code>命令，说不在sudoers列表什么的，好嘛那就加进去嘛，google一下，sudoers列表在<code>/etc/sudoers</code>文件里，加上一行<code>git ALL=(ALL:ALL) ALL</code>，期间要用<code>chmod u+x /etc/sudoers</code>去掉写保护，修改后<code>chmod u-X /etc/sudoers</code>加回来。好了，<code>sudo</code>名令能用了，但是后面要输root密码，在shell脚本里该怎么处理呢？</p>
<p>又google了一下，还是这个<code>/etc/sudoers</code>文件，可以设置某个帐号使用sudo命令不用输密码，还可以限制文件，好，把之前加的改一下，改成<code>git ALL=(ALL:ALL) NOPASSWD: /home/git/update-blog</code>，我把cd进站点文件夹和<code>git pull</code>命令写进了<code>update-blog</code>脚本，那我就只要执行<code>sudo /home/git/update-blog</code>就好喇。</p>
<p>好，都配好了那本地hexo这边<code>hexo d</code>一下试试部署，发现这服务器文件没有更新嘛，又没什么错误提示，于是我又clone了一份到其他地方再捣弄几下，加个文件直接<code>git push</code>试试看，这次有错误提示了，<code>sudo: no tty present and no askpass program specified</code>什么的。再放google看看，说是在<code>/etc/sudoers</code>加入一行<code>Defaults visiblepw</code>就好了，加了之后果然好了，顺利push成功，站点文件也更新了，顺利完成部署工作</p>
<p>但这tty是什么鬼呢？加入的这个<code>Defaults visiblepw</code>又是干什么的？不弄清楚不放心啊。</p>
<p>google了tty，应该就是控制终端，就是登录的shell，但我现在是用的git的hooks触发的，没有登录的shell，于是就报上面的错了。</p>
<p>然后加入的<code>Defaults visiblepw</code>呢？查到了<a href="http://www.sudo.ws/man/1.8.13/sudoers.man.html" target="_blank" rel="noopener">sudoers文档</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">visiblepw</span><br><span class="line">By default, sudo will refuse to run if the user must enter a password but it is not possible to disable echo on the terminal. If the visiblepw flag is set, sudo will prompt for a password even when it would be visible on the screen. This makes it possible to run things like “ssh somehost sudo ls” since by default, ssh(1) does not allocate a tty when running a command. This flag is off by default.</span><br></pre></td></tr></table></figure>
<p>好像是加了就不判断有没有tty了</p>
]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>jshop吸顶banner公共模块</title>
    <url>/2014/07/02/2014-06-26/</url>
    <content><![CDATA[<p>2014-09-29 18:08 模块更新Update:</p>
<p>加入停止吸顶触发高度，dom元素传参方法如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"f-hd-ph"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jdc-fixtop f-hd-wp"</span> <span class="attr">data-offset</span>=<span class="string">"触发高度"</span> <span class="attr">data-offset_bottom</span>=<span class="string">"停止吸顶触发高度"</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>js传参方法如下，同时兼容旧版的传参方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'需吸顶dom'</span>).fixTop(&#123;</span><br><span class="line">    top: 触发吸顶的高度,</span><br><span class="line">    bottom: 停止吸顶触发高度</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>加入触发吸顶、停止触发吸顶回调函数，只可使用js方法传参：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'需吸顶dom'</span>).fixTop(&#123;</span><br><span class="line">    top: 触发吸顶的高度,</span><br><span class="line">    bottom: 停止吸顶触发高度</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    toFix: 吸顶回调函数,</span><br><span class="line">    toStatic: 停止吸顶回调函数</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>加入更新触发吸顶、触发停止吸顶高度方法<code>updatePoint</code>，可同时更新开始、结束点，不传则不更新该点：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(el).data[<span class="string">'FixTop'</span>].updatePoint(&#123;</span><br><span class="line">    top: 触发吸顶的高度,</span><br><span class="line">    bottom: 停止吸顶触发高度</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<hr>
<p>2014-07-17 15:53 模块更新Update:</p>
<p>添加使用类名添加行为的功能，不需再手动初始化模块</p>
<p>只需dom元素结构如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"f-hd-ph"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jdc-fixtop f-hd-wp"</span> <span class="attr">data-offset</span>=<span class="string">"触发高度"</span>&gt;</span></span><br><span class="line">        ......</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>再在最后引入此公共模块，即可在<code>jdc-fixtop</code>类上初始化本模块，当窗口滚动到大于触发高度时将触发吸顶，少于时还原</p>
<hr>
<p>2014-07-02 16:35 模块更新Update:</p>
<p>不再限定吸顶dom的<code>id</code>，封装成jQuery插件，分离吸顶<code>id</code>和触发<code>fix</code>的<code>scrollTop</code>值，使用方法为</p>
<p><code>$(&#39;需吸顶dom&#39;).fixTop(触发吸顶的高度);</code></p>
<hr>
<p>需吸顶的dom元素结构需如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"f-hd-ph"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"f-hd-wp"</span>&gt;</span>   </span><br><span class="line">		......</span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其中<code>.f-hd-ph</code>(fixed-header-placeholder)为banner的占位符，以避免滚动到下方时banner的<code>position</code>转换为<code>fixed</code>或<code>absolute</code>时高度塌陷，所以此元素需指定高度</p>
<p><code>.f-hd-wp</code>(fixed-header-wrapper)为banner的容器，滚动时<code>position</code>转换为<code>fixed</code>或<code>absolute</code>；此元素宽度为100%，<code>overflow</code>属性为<code>hidden</code>，全景背景可设在此元素；元素内可添加导航等内容</p>
<h3 id="一个栗子："><a href="#一个栗子：" class="headerlink" title="一个栗子："></a>一个栗子：</h3><p>以下为自定义模块内容，在模块后再加上吸顶模块即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.f-hd-ph</span>&#123;</span></span><br><span class="line">  height: 100px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.f-hd-wp</span>&#123;</span></span><br><span class="line">  height: 100px;</span><br><span class="line">  background: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.header-content</span>&#123;</span></span><br><span class="line">  width: 1002px;</span><br><span class="line">  height: 100px;</span><br><span class="line"><span class="css">  <span class="selector-tag">margin-left</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">margin-right</span><span class="selector-pseudo">:auto</span>;</span></span><br><span class="line">  background: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"f-hd-ph"</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fix-header"</span> <span class="attr">class</span>=<span class="string">"f-hd-wp"</span>&gt;</span>   </span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header-content"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:2000px;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="string">'#fix-header'</span>).fixTop($(<span class="string">'#fix-header'</span>).offset().top);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后附模块源码：</p>
<p>css代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.f-hd-wp</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fix-header-fix</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>js代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> is_support_fix=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> !($.browser.msie &amp;&amp; $.browser.version &lt; <span class="number">7</span>);</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> FixTop=<span class="function"><span class="keyword">function</span>(<span class="params">target, scrollTopPoint, option</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this=<span class="keyword">this</span>;</span><br><span class="line">    _this.$target=$(target);</span><br><span class="line">    _this.scrollTopPoint=scrollTopPoint;</span><br><span class="line">    <span class="keyword">if</span>(scrollTopPoint.top)&#123;</span><br><span class="line">      _this.scrollTopPoint=scrollTopPoint.top;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(scrollTopPoint.bottom)&#123;</span><br><span class="line">      _this.scrollBottomPoint=scrollTopPoint.bottom;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(_this.$target.length)&#123;</span><br><span class="line">      $(<span class="built_in">window</span>, <span class="built_in">document</span>).bind(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> scrollTop=$(<span class="keyword">this</span>).scrollTop();</span><br><span class="line">        _this.scrollBottomPoint=_this.scrollBottomPoint || $(<span class="string">'body'</span>).height();</span><br><span class="line">        <span class="keyword">if</span>(!_this.$target.data(<span class="string">'is_fix'</span>) &amp;&amp;</span><br><span class="line">          (_this.scrollTopPoint &amp;&amp; scrollTop &gt; _this.scrollTopPoint) &amp;&amp;</span><br><span class="line">          (_this.scrollBottomPoint &amp;&amp; scrollTop &lt; _this.scrollBottomPoint))&#123;</span><br><span class="line">          _this.$target.addClass(<span class="string">'fix-header-fix'</span>);</span><br><span class="line">          <span class="keyword">if</span>(is_support_fix)&#123;</span><br><span class="line">            _this.$target.css(<span class="string">'position'</span>, <span class="string">'fix'</span>+<span class="string">'ed'</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            _this.$target.css(<span class="string">'top'</span>, scrollTop+<span class="string">'px'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          _this.$target.data(<span class="string">'is_fix'</span>, <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">if</span>(option &amp;&amp; $.isFunction(option.toFix))&#123;</span><br><span class="line">            option.toFix();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(_this.$target.data(<span class="string">'is_fix'</span>) &amp;&amp;</span><br><span class="line">          scrollTop &lt;= _this.scrollTopPoint || </span><br><span class="line">          scrollTop &gt;= _this.scrollBottomPoint)&#123;</span><br><span class="line">          _this.$target.removeClass(<span class="string">'fix-header-fix'</span>);</span><br><span class="line">          <span class="keyword">if</span>(is_support_fix)&#123;</span><br><span class="line">            _this.$target.css(<span class="string">'position'</span>, <span class="string">'static'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          _this.$target.data(<span class="string">'is_fix'</span>, <span class="number">0</span>);</span><br><span class="line">          <span class="keyword">if</span>(option &amp;&amp; $.isFunction(option.toStatic))&#123;</span><br><span class="line">            option.toStatic();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="built_in">window</span>, <span class="built_in">document</span>).trigger(<span class="string">'scroll'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  FixTop.prototype.updatePoint=<span class="function"><span class="keyword">function</span>(<span class="params">scrollTopPoint</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this=<span class="keyword">this</span>;</span><br><span class="line">    _this.scrollTopPoint=scrollTopPoint;</span><br><span class="line">    <span class="keyword">if</span>(scrollTopPoint.top)&#123;</span><br><span class="line">      _this.scrollTopPoint=scrollTopPoint.top;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(scrollTopPoint.bottom)&#123;</span><br><span class="line">      _this.scrollBottomPoint=scrollTopPoint.bottom;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  $.fn.fixTop=<span class="function"><span class="keyword">function</span>(<span class="params">scrollTopPoint, option</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $<span class="keyword">this</span>=$(<span class="keyword">this</span>);</span><br><span class="line">    $<span class="keyword">this</span>.data()[<span class="string">'FixTop'</span>]=<span class="keyword">new</span> FixTop(<span class="keyword">this</span>, scrollTopPoint, option);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'.jdc-fixtop'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i, el</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $el=$(el),</span><br><span class="line">      offset=$el.data(<span class="string">'offset'</span>) || $el.offset().top,</span><br><span class="line">      offset_bottom=$el.data(<span class="string">'offset_bottom'</span>);</span><br><span class="line">    $(el).fixTop(&#123;</span><br><span class="line">      top: offset,</span><br><span class="line">      bottom: offset_bottom</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>jshop</tag>
      </tags>
  </entry>
  <entry>
    <title>OSX下safari窗口滚动时scrollTop值变化问题</title>
    <url>/2014/06/23/2014-06-23/</url>
    <content><![CDATA[<p>在作<code>WindowScroller</code>对象时，经测试，safari在转页时的滚动会停留在中途的某个位置，其他浏览器并没有此行为；</p>
<p>经检查后为在这个点上页面重新作渲染，safari的<code>scrollTop</code>值停止更新，导致判断为页面已不可再滚动，停止了定时器</p>
<p>修复此bug的方法为修改判断条件，计算页面滚动到底部的<code>scrollTop</code>数值，与当前的值作对比</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>safari</tag>
      </tags>
  </entry>
  <entry>
    <title>Flash player debugger使用</title>
    <url>/2014/05/01/2014-05-01/</url>
    <content><![CDATA[<p>这个想了下还是记下来吧，今天项目需要要写些as3的东西，但是发布到测试环境后不能用<code>flash builder</code> 查看<code>trace</code>输出了，装了<code>flash player debugger</code>还是什么提示都没有，google了一下找到使用方法了……</p>
<p>源地址：<a href="https://github.com/mozilla/shumway/wiki/Trace-Output-with-Flash-Player-Debugger" target="_blank" rel="noopener">https://github.com/mozilla/shumway/wiki/Trace-Output-with-Flash-Player-Debugger</a></p>
<p>一些要点记下来免得github出什么问题或作者删了</p>
<ol>
<li>首先装flash player debugger，地址么adobe官网，版本经常更新地址就不贴了</li>
<li>找到配置文件mm.cfg，OSX的就在用户目录~，其他的看   <a href="http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7fc9.html" target="_blank" rel="noopener">http://help.adobe.com/en_US/flex/using/WS2db454920e96a9e51e63e3d11c0bf69084-7fc9.html</a> 基本都是各自的用户目录</li>
<li><p>mm.cfg里写上以下配置，就会记录trace输出和warning、AVM调用信息</p>
<p> ErrorReportingEnable=1<br> TraceOutputFileEnable=1<br> MaxWarnings=50<br> AS3Trace=1</p>
</li>
<li><p>找到log文件，OSX的在~/Library/Preferences/Macromedia/Flash Player/Logs/，其他的看<a href="http://help.adobe.com/en_US/flex/using/WSda78ed3a750d6b8f-4867184d1239f9d0558-8000.html" target="_blank" rel="noopener">http://help.adobe.com/en_US/flex/using/WSda78ed3a750d6b8f-4867184d1239f9d0558-8000.html</a></p>
</li>
</ol>
<p>ps:最后说下terminal下<code>tail -f</code>可以看文件动态更新，我知道你们知道，但我之前不知道…</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>as3</tag>
      </tags>
  </entry>
  <entry>
    <title>续《mouseenter, mouseleave事件在ie6,7下的表现差异》</title>
    <url>/2014/04/30/2014-04-30/</url>
    <content><![CDATA[<p>在之前的<a href="/2014-02-21.txt">这篇博文</a>里写到<code>mouseenter</code>, <code>mouseleave</code>在ie6、7下有表现差异情况，原来是错怪ie了……出问题的是IEtester，在虚拟机里的ie6、7是没问题的。</p>
<p>另外提到的一点是这两个事件只在ie下有，那其他浏览器是怎么做到<code>.on(&#39;mouseenter&#39;)</code>和<code>.on(&#39;mouseleave&#39;)</code>的？更诡异的是我在项目中的写法是 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'mouseenter/mouseleave'</span>, <span class="string">'#selector'</span>, callback(e)&#123;&#125;);</span><br></pre></td></tr></table></figure>
<p>但这两个事件是不冒泡的，就是根本不会在<code>document</code>上触发，上面的<code>callback</code>根本不会执行</p>
<p>于是我查看了一下事件的属性，在<code>callback</code>中，查看了<code>e</code>的<code>type</code>，是<code>mouseenter</code>；但这只是<code>jQuery</code>的<code>Event</code>，再看一下此时的<code>window.event.type</code>，是<code>mouseover</code>。这就解开了上面的问题，<code>jQuery</code>用<code>mouseover</code>来模拟了<code>mouseenter</code>的事件（<code>mouseleave</code>是用了<code>mouseout</code>）。为什么是模拟而不是直接用<code>mouseover</code>/<code>mouseout</code>呢？</p>
<p>测试后<code>mouseenter</code>/<code>mouseleave</code>与<code>mouseover</code>/<code>mouseout</code>的区别为，若我的dom如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"outter"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>callback</code>绑在<code>outter</code>的事件上，则进入、退出<code>outter</code>的时候，这两种事件的表现是一样的，都是会触发一次；但在进入、退出<code>outter</code>的子元素<code>inner</code>时，<code>mouseenter</code>/<code>mouseleave</code>不触发，<code>mouseouver</code>/<code>mouseout</code>触发了，就是因为这对事件是冒泡的，<code>inner</code>的事件冒泡到<code>outter</code>上触发了<code>callback</code>。正常的交互来说我们想要的触发方式就是<code>mouseenter</code>/<code>mouseleave</code>。</p>
<p>那怎么模拟<code>mouseenter</code>/<code>mouseleave</code>事件呢？我的思路是触发的时候判断<code>event.target</code>是否是绑定的<code>dom</code>，不是的话就取消冒泡。</p>
<p>看看jQuery是怎么写的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create mouseenter/leave events using mouseover/out and event-time checks</span></span><br><span class="line"><span class="comment">// Support: Chrome 15+</span></span><br><span class="line">jQuery.each(&#123;</span><br><span class="line">    mouseenter: <span class="string">"mouseover"</span>,</span><br><span class="line">    mouseleave: <span class="string">"mouseout"</span>,</span><br><span class="line">    pointerenter: <span class="string">"pointerover"</span>,</span><br><span class="line">    pointerleave: <span class="string">"pointerout"</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"> orig, fix </span>) </span>&#123;</span><br><span class="line">    jQuery.event.special[ orig ] = &#123;</span><br><span class="line">        delegateType: fix,</span><br><span class="line">        bindType: fix,</span><br><span class="line">        handle: <span class="function"><span class="keyword">function</span>(<span class="params"> event </span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ret,</span><br><span class="line">                target = <span class="keyword">this</span>,</span><br><span class="line">                related = event.relatedTarget,</span><br><span class="line">                handleObj = event.handleObj;</span><br><span class="line">            <span class="comment">// For mousenter/leave call the handler if related is outside the target.</span></span><br><span class="line">            <span class="comment">// NB: No relatedTarget if the mouse left/entered the browser window</span></span><br><span class="line">            <span class="keyword">if</span> ( !related || (related !== target &amp;&amp; !jQuery.contains( target, related )) ) &#123;</span><br><span class="line">                event.type = handleObj.origType;</span><br><span class="line">                ret = handleObj.handler.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">                event.type = fix;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>jQuery</code>的写法是判断移入、移出的对象是否都是绑定事件的子对象。这样说我上面的思路漏了这么一种情况：子元素占的区域与父元素分隔独立，移到子元素区域里<code>event</code>不会触发。</p>
<p>这次研究解决了我之前的一点问题，但按之前提的问题来说，还有好多债要还……</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>可编辑块光标定位的方法</title>
    <url>/2014/03/10/%E5%8F%AF%E7%BC%96%E8%BE%91%E5%9D%97%E5%85%89%E6%A0%87%E5%AE%9A%E4%BD%8D%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>之前在可编辑块中插入文本框等内容后，光标定位控制是一个困扰挺久的一个问题。</p>
<p>后来使用的方法是把插入的文本块的指针存起来，插入后再使用<code>range.setEndAfter(el)</code>把光标末尾定位在文本块后，再<code>range.collapse(false)</code>就完成光标定位了。</p>
<p>但这个方法只能用于插入的是一个元素节点，如要插入文本节点就不能使用了。</p>
<p>而今天就遇到这样一个应用场景，初步想的方法是先用<code>range.enOffset</code>得到当前光标的位置，再加上插入文本的长度，最后<code>range.setEnd(offset)</code>应该就可以了。</p>
<p>实验后发现无论加多少在<code>endOffset</code>都提示输入的offset过大，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">range.insertNode(frag);</span><br><span class="line">range.setEnd(range.endContainer, range.endOffset+insert_length);</span><br></pre></td></tr></table></figure>
<p>检查了下，当编辑块为空时，运行到第二行时的<code>endOffset</code>为<code>1</code>，<code>startOffset</code>为<code>0</code>，这相当奇怪，因为在编辑框中光标是没有选中任何字符，即应该是<code>collapsed</code>，<code>startOffset</code>跟<code>endOffset</code>是相等的。</p>
<p>后头检查代码后，这第二行取的<code>endOffset</code>是插入文本后的，于是在插入前取出<code>endOffset</code>检查，果然这次<code>start</code>跟<code>end</code>都是<code>0</code>了。这说明插入文本后，<code>range</code>的范围是包裹着插入的内容的，如果想把光标定位到插入内容后，只需要<code>range.collapse(false)</code>就可以了………………</p>
<p>也就是上边这么多都是废话了，代码只需改成这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">range.insertNode(frag);</span><br><span class="line">range.collapse(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>就可以达到预想的要求了，经过确认，插入文本块也可以使用上述的代码。</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>input</tag>
      </tags>
  </entry>
  <entry>
    <title>ie下异步上传文件的问题</title>
    <url>/2014/02/28/ie%E4%B8%8B%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>遇到一个奇葩插件：<code>ajaxfileupload.js</code></p>
<p>作用是异步上传文件，实现方法是动态生成<code>form</code>和<code>form</code>提交的目标<code>iframe</code>，再从<code>iframe</code>的<code>body</code>取回服务器返回</p>
<p>问题是：</p>
<ol>
<li>这个插件没任何作者信息，js文件内版本号都没有，有问题得google半天</li>
<li>这个插件有点历史了，当年配套的是<code>jQuery 1.2.1</code>，用现在的新版本会使<code>catch</code>到的错误没有<code>handler</code></li>
<li>这个插件是个半成品，作者大概没有全面测试过就放出来了，事实证明ie6~8是使用不了的</li>
<li>国内竟然有好多网站在用这个插件，google到的信息多半是中文的</li>
</ol>
<p>这个插件在ie6～8的症状如下：</p>
<p>动态插入<code>iframe</code>，<code>src</code>设为<code>javascript:false</code>；<code>form</code>的<code>target</code>设为这个<code>iframe</code>，再把<code>handler</code>绑定在<code>iframe</code>的<code>load</code>事件上。在其他浏览器上这个流程都没问题，但就是在那几个ie上，<code>load</code>事件竟然就在load完<code>javascript:false;</code>就<code>trigger</code>了……然后……就没然后了</p>
<p>这个问题倒还好，我在<code>handler</code>里加了个判断，若<code>src</code>是<code>javascript:false;</code>就不做处理，等到真正的返回。但是，等了十年那<code>load</code>事件再也没有<code>trigger</code>过，查了network是根本没有<code>post</code>请求……于是我尝试手动<code>$(form).submit()</code>，终于在第二次手动submit后发出了请求然后有了返回，还要每次都是两次……</p>
<p>于是我加上了重试<code>handler</code>，在没收到返回前，隔一定时间再作提交，不过这个时间不好定，使用起来也不现实，但起码有个方法了。于是把这套代码放到虚拟机的真ie8上去试……对，之前都是在ie11里把文档模式设成ie8去试的……结果就是提交的文件为空……为空为空为空为空为空为空为空为空为空为空为空</p>
<p>google结果是ie阻止了<code>javascript</code>调用的<code>submit</code>事件，防止后台自动上传……我试了下<code>$(&#39;input[type=submit]&#39;).click()</code>也不行……</p>
<p>结果是ie6～8这个功能不做了……</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ie</tag>
        <tag>input</tag>
      </tags>
  </entry>
  <entry>
    <title>ie6、7下字符串不能使用数组索引</title>
    <url>/2014/02/28/ie6%E3%80%817%E4%B8%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<p>ie6/7下字符串是不能用数组索引的，就是不能<code>str[i]</code>这样取第<code>i-1</code>个的字符</p>
<p>解决方法是用<code>str.charAt(i)</code>或<code>str.clice(0,1)</code>这样取</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>ie</tag>
      </tags>
  </entry>
  <entry>
    <title>到ie6了，文字与inline-block相接时line-height无效</title>
    <url>/2014/02/27/%E5%88%B0ie6%E4%BA%86%EF%BC%8C%E6%96%87%E5%AD%97%E4%B8%8Einline-block%E7%9B%B8%E6%8E%A5%E6%97%B6line-height%E6%97%A0%E6%95%88/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">	abcabcabc<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>DOM结构如上，<code>.icon</code>设为<code>display:inline-block</code>后，<code>p</code>的行高时效了，变得跟<code>.icon</code>的高度一样</p>
<p>找到的<a href="http://www.cssbox.net/ie6-line-height.html" target="_blank" rel="noopener">解决方案</a>是<code>.icon</code>用上下<code>margin</code>把行高撑回去……当然是要手动算的</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>ie</tag>
      </tags>
  </entry>
  <entry>
    <title>IE6/7下父元素设为display:none，子元素仍出现的bug</title>
    <url>/2014/02/25/2014-02-25-1/</url>
    <content><![CDATA[<p>子元素<code>position</code>为<code>relative</code>/<code>absolute</code>时，先隐藏父元素，再隐藏子元素会出现这个bug，还好这次调一下js顺序就好了…</p>
<p>资料：<br><a href="http://www.positioniseverything.net/explorer/ienondisappearcontentbugPIE/index.htm" target="_blank" rel="noopener">http://www.positioniseverything.net/explorer/ienondisappearcontentbugPIE/index.htm</a></p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>mouseenter, mouseleave事件在ie6,7下的表现差异</title>
    <url>/2014/02/25/2014-02-21/</url>
    <content><![CDATA[<p>今天在做把DRSOON@win客户端web化时，发现<code>mouseenter</code>, <code>mouseleave</code>事件的<code>target</code>为<code>a</code>中的<code>label</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label"</span>&gt;</span>label<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>多次测试后发现<code>a</code>在不设置<code>background</code>时触发不了事件，结果把<code>a</code>设上背景色后恢复预想交互</p>
<p>事件是用<code>jQuery</code>绑定的，好像<code>mouseenter</code>, <code>mouseleave</code>原生只有在ie下有？以后再研究</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>IE8 下jQuery.each的index问题</title>
    <url>/2014/02/25/2014-02-25/</url>
    <content><![CDATA[<p>今日做旧ie兼容又有新问题了，<code>jQuery.each</code>对DOM进行操作时，<code>fucntion(index, el){}</code>中的到的<code>index</code>不是按DOM顺序操作的，即是<code>index!==$(el).index()</code>。相信IE6\7行为也是这样，具体原因要查看下<code>jQuery</code>源码。</p>
<p>先忙完这个web版再说</p>
]]></content>
      <categories>
        <category>work</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
